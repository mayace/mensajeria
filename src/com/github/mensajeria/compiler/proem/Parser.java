
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Dec 19 00:55:48 CST 2013
//----------------------------------------------------

package com.github.mensajeria.compiler.proem;

import com.github.mensajeria.compiler.Sim;
import com.github.mensajeria.compiler.Attr;
import com.github.mensajeria.compiler.Err;
import com.github.mensajeria.compiler.Nodo;
import java.io.File;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.HashSet;
import java.lang.Thread.State;
import java.awt.Dimension;
import java.awt.Point;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Dec 19 00:55:48 CST 2013
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\003\000\002\002\004\000\002\002" +
    "\002\000\002\003\003\000\002\004\004\000\002\004\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\004\000\002" +
    "\006\006\000\002\007\006\000\002\007\011\000\002\012" +
    "\007\000\002\013\007\000\002\011\005\000\002\011\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\015\005\000\002\015\003\000\002\016\005\000\002\016" +
    "\003\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\003\000\002\020\005\000\002\020\005\000\002" +
    "\020\003\000\002\021\005\000\002\021\005\000\002\021" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\005\000\002\026\003\000" +
    "\002\024\003\000\002\025\003\000\002\023\003\000\002" +
    "\027\003\000\002\027\002\000\002\030\005\000\002\030" +
    "\003\000\002\035\005\000\002\035\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\031\011\000" +
    "\002\032\013\000\002\033\012\000\002\034\006\000\002" +
    "\034\002\000\002\036\003\000\002\036\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\032\002\uffff\011\007\012\025\013\024\014" +
    "\015\031\010\040\011\041\046\042\037\044\012\046\032" +
    "\053\027\001\002\000\074\002\uffd5\011\uffd5\012\uffd5\013" +
    "\uffd5\014\uffd5\015\uffd5\016\uffd5\020\uffd5\021\uffd5\023\uffd5" +
    "\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032" +
    "\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\040\uffd5\041\uffd5" +
    "\042\uffd5\044\uffd5\046\uffd5\050\uffd5\052\uffd5\053\uffd5\001" +
    "\002\000\074\002\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4" +
    "\015\uffd4\016\uffd4\020\uffd4\021\uffd4\023\uffd4\024\uffd4\025" +
    "\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4" +
    "\034\uffd4\035\uffd4\036\uffd4\040\uffd4\041\uffd4\042\uffd4\044" +
    "\uffd4\046\uffd4\050\uffd4\052\uffd4\053\uffd4\001\002\000\012" +
    "\015\177\020\053\031\uffcb\050\uffcb\001\002\000\074\002" +
    "\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0" +
    "\020\uffd0\021\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027" +
    "\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0" +
    "\036\uffd0\040\uffd0\041\uffd0\042\uffd0\044\uffd0\046\uffd0\050" +
    "\uffd0\052\uffd0\053\uffd0\001\002\000\014\011\007\012\025" +
    "\013\024\014\015\031\010\001\002\000\004\031\167\001" +
    "\002\000\004\031\154\001\002\000\034\002\ufff9\011\ufff9" +
    "\012\ufff9\013\ufff9\014\ufff9\031\ufff9\040\ufff9\041\ufff9\042" +
    "\ufff9\044\ufff9\046\ufff9\052\ufff9\053\ufff9\001\002\000\034" +
    "\002\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\031\ufffa\040" +
    "\ufffa\041\ufffa\042\ufffa\044\ufffa\046\ufffa\052\ufffa\053\ufffa" +
    "\001\002\000\102\002\uffcf\011\uffcf\012\uffcf\013\uffcf\014" +
    "\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\023\uffcf" +
    "\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032" +
    "\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\040\uffcf\041\uffcf" +
    "\042\uffcf\043\uffcf\044\uffcf\046\uffcf\047\uffcf\050\uffcf\052" +
    "\uffcf\053\uffcf\001\002\000\006\016\131\047\143\001\002" +
    "\000\034\002\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\031" +
    "\ufff7\040\ufff7\041\ufff7\042\ufff7\044\ufff7\046\ufff7\052\ufff7" +
    "\053\ufff7\001\002\000\034\002\ufffe\011\007\012\025\013" +
    "\024\014\015\031\010\040\011\041\046\042\037\044\012" +
    "\046\032\052\ufffe\053\027\001\002\000\034\002\ufff8\011" +
    "\ufff8\012\ufff8\013\ufff8\014\ufff8\031\ufff8\040\ufff8\041\ufff8" +
    "\042\ufff8\044\ufff8\046\ufff8\052\ufff8\053\ufff8\001\002\000" +
    "\004\002\001\001\002\000\034\002\ufffb\011\ufffb\012\ufffb" +
    "\013\ufffb\014\ufffb\031\ufffb\040\ufffb\041\ufffb\042\ufffb\044" +
    "\ufffb\046\ufffb\052\ufffb\053\ufffb\001\002\000\074\002\uffd2" +
    "\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\020" +
    "\uffd2\021\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2" +
    "\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036" +
    "\uffd2\040\uffd2\041\uffd2\042\uffd2\044\uffd2\046\uffd2\050\uffd2" +
    "\052\uffd2\053\uffd2\001\002\000\074\002\uffd1\011\uffd1\012" +
    "\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\020\uffd1\021\uffd1" +
    "\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031" +
    "\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\040\uffd1" +
    "\041\uffd1\042\uffd1\044\uffd1\046\uffd1\050\uffd1\052\uffd1\053" +
    "\uffd1\001\002\000\034\002\uffc6\011\uffc6\012\uffc6\013\uffc6" +
    "\014\uffc6\031\uffc6\040\uffc6\041\uffc6\042\uffc6\044\uffc6\046" +
    "\uffc6\052\uffc6\053\uffc6\001\002\000\014\011\007\012\025" +
    "\013\024\014\015\031\010\001\002\000\034\002\uffc8\011" +
    "\uffc8\012\uffc8\013\uffc8\014\uffc8\031\uffc8\040\uffc8\041\uffc8" +
    "\042\uffc8\044\uffc8\046\uffc8\052\uffc8\053\uffc8\001\002\000" +
    "\044\015\uffd7\016\uffef\020\uffd7\021\uffd7\023\uffd7\024\uffd7" +
    "\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\033\uffd7\034" +
    "\uffd7\035\uffd7\036\uffd7\047\uffef\050\uffd7\001\002\000\004" +
    "\031\135\001\002\000\006\031\117\050\116\001\002\000" +
    "\034\002\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\031\uffc7" +
    "\040\uffc7\041\uffc7\042\uffc7\044\uffc7\046\uffc7\052\uffc7\053" +
    "\uffc7\001\002\000\074\002\uffd8\011\uffd8\012\uffd8\013\uffd8" +
    "\014\uffd8\015\uffd8\016\uffd8\020\uffd8\021\uffd8\023\uffd8\024" +
    "\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8" +
    "\033\uffd8\034\uffd8\035\uffd8\036\uffd8\040\uffd8\041\uffd8\042" +
    "\uffd8\044\uffd8\046\uffd8\050\uffd8\052\uffd8\053\uffd8\001\002" +
    "\000\074\002\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015" +
    "\uffdb\016\uffdb\020\uffdb\021\uffdb\023\uffdb\024\uffdb\025\uffdb" +
    "\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034" +
    "\uffdb\035\072\036\071\040\uffdb\041\uffdb\042\uffdb\044\uffdb" +
    "\046\uffdb\050\uffdb\052\uffdb\053\uffdb\001\002\000\004\031" +
    "\105\001\002\000\070\002\uffde\011\uffde\012\uffde\013\uffde" +
    "\014\uffde\015\uffde\016\uffde\020\uffde\021\uffde\023\uffde\024" +
    "\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde" +
    "\033\067\034\066\040\uffde\041\uffde\042\uffde\044\uffde\046" +
    "\uffde\050\uffde\052\uffde\053\uffde\001\002\000\074\002\uffd6" +
    "\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\020" +
    "\uffd6\021\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6" +
    "\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036" +
    "\uffd6\040\uffd6\041\uffd6\042\uffd6\044\uffd6\046\uffd6\050\uffd6" +
    "\052\uffd6\053\uffd6\001\002\000\064\002\uffe5\011\uffe5\012" +
    "\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\020\uffe5\021\uffe5" +
    "\023\061\024\063\025\064\026\057\027\060\030\062\031" +
    "\uffe5\032\uffe5\040\uffe5\041\uffe5\042\uffe5\044\uffe5\046\uffe5" +
    "\050\uffe5\052\uffe5\053\uffe5\001\002\000\004\002\104\001" +
    "\002\000\050\002\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7" +
    "\015\uffe7\016\uffe7\020\uffe7\021\055\031\uffe7\032\uffe7\040" +
    "\uffe7\041\uffe7\042\uffe7\044\uffe7\046\uffe7\050\uffe7\052\uffe7" +
    "\053\uffe7\001\002\000\034\002\ufffc\011\ufffc\012\ufffc\013" +
    "\ufffc\014\ufffc\031\ufffc\040\ufffc\041\ufffc\042\ufffc\044\ufffc" +
    "\046\ufffc\052\ufffc\053\ufffc\001\002\000\004\031\047\001" +
    "\002\000\014\011\007\012\025\013\024\014\015\031\010" +
    "\001\002\000\074\002\uffd7\011\uffd7\012\uffd7\013\uffd7\014" +
    "\uffd7\015\uffd7\016\uffd7\020\uffd7\021\uffd7\023\uffd7\024\uffd7" +
    "\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033" +
    "\uffd7\034\uffd7\035\uffd7\036\uffd7\040\uffd7\041\uffd7\042\uffd7" +
    "\044\uffd7\046\uffd7\050\uffd7\052\uffd7\053\uffd7\001\002\000" +
    "\006\020\053\032\052\001\002\000\004\017\103\001\002" +
    "\000\014\011\007\012\025\013\024\014\015\031\010\001" +
    "\002\000\050\002\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8" +
    "\015\uffe8\016\uffe8\020\uffe8\021\055\031\uffe8\032\uffe8\040" +
    "\uffe8\041\uffe8\042\uffe8\044\uffe8\046\uffe8\050\uffe8\052\uffe8" +
    "\053\uffe8\001\002\000\014\011\007\012\025\013\024\014" +
    "\015\031\010\001\002\000\064\002\uffe6\011\uffe6\012\uffe6" +
    "\013\uffe6\014\uffe6\015\uffe6\016\uffe6\020\uffe6\021\uffe6\023" +
    "\061\024\063\025\064\026\057\027\060\030\062\031\uffe6" +
    "\032\uffe6\040\uffe6\041\uffe6\042\uffe6\044\uffe6\046\uffe6\050" +
    "\uffe6\052\uffe6\053\uffe6\001\002\000\014\011\007\012\025" +
    "\013\024\014\015\031\010\001\002\000\014\011\007\012" +
    "\025\013\024\014\015\031\010\001\002\000\014\011\007" +
    "\012\025\013\024\014\015\031\010\001\002\000\014\011" +
    "\007\012\025\013\024\014\015\031\010\001\002\000\014" +
    "\011\007\012\025\013\024\014\015\031\010\001\002\000" +
    "\014\011\007\012\025\013\024\014\015\031\010\001\002" +
    "\000\070\002\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015" +
    "\uffe1\016\uffe1\020\uffe1\021\uffe1\023\uffe1\024\uffe1\025\uffe1" +
    "\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\067\034" +
    "\066\040\uffe1\041\uffe1\042\uffe1\044\uffe1\046\uffe1\050\uffe1" +
    "\052\uffe1\053\uffe1\001\002\000\014\011\007\012\025\013" +
    "\024\014\015\031\010\001\002\000\014\011\007\012\025" +
    "\013\024\014\015\031\010\001\002\000\074\002\uffdc\011" +
    "\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\020\uffdc" +
    "\021\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030" +
    "\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\072\036\071" +
    "\040\uffdc\041\uffdc\042\uffdc\044\uffdc\046\uffdc\050\uffdc\052" +
    "\uffdc\053\uffdc\001\002\000\014\011\007\012\025\013\024" +
    "\014\015\031\010\001\002\000\014\011\007\012\025\013" +
    "\024\014\015\031\010\001\002\000\074\002\uffda\011\uffda" +
    "\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda\020\uffda\021" +
    "\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda" +
    "\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\040" +
    "\uffda\041\uffda\042\uffda\044\uffda\046\uffda\050\uffda\052\uffda" +
    "\053\uffda\001\002\000\074\002\uffd9\011\uffd9\012\uffd9\013" +
    "\uffd9\014\uffd9\015\uffd9\016\uffd9\020\uffd9\021\uffd9\023\uffd9" +
    "\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032" +
    "\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\040\uffd9\041\uffd9" +
    "\042\uffd9\044\uffd9\046\uffd9\050\uffd9\052\uffd9\053\uffd9\001" +
    "\002\000\074\002\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd" +
    "\015\uffdd\016\uffdd\020\uffdd\021\uffdd\023\uffdd\024\uffdd\025" +
    "\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd" +
    "\034\uffdd\035\072\036\071\040\uffdd\041\uffdd\042\uffdd\044" +
    "\uffdd\046\uffdd\050\uffdd\052\uffdd\053\uffdd\001\002\000\070" +
    "\002\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016" +
    "\uffdf\020\uffdf\021\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf" +
    "\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\067\034\066\040" +
    "\uffdf\041\uffdf\042\uffdf\044\uffdf\046\uffdf\050\uffdf\052\uffdf" +
    "\053\uffdf\001\002\000\070\002\uffe4\011\uffe4\012\uffe4\013" +
    "\uffe4\014\uffe4\015\uffe4\016\uffe4\020\uffe4\021\uffe4\023\uffe4" +
    "\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032" +
    "\uffe4\033\067\034\066\040\uffe4\041\uffe4\042\uffe4\044\uffe4" +
    "\046\uffe4\050\uffe4\052\uffe4\053\uffe4\001\002\000\070\002" +
    "\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0" +
    "\020\uffe0\021\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027" +
    "\uffe0\030\uffe0\031\uffe0\032\uffe0\033\067\034\066\040\uffe0" +
    "\041\uffe0\042\uffe0\044\uffe0\046\uffe0\050\uffe0\052\uffe0\053" +
    "\uffe0\001\002\000\070\002\uffe3\011\uffe3\012\uffe3\013\uffe3" +
    "\014\uffe3\015\uffe3\016\uffe3\020\uffe3\021\uffe3\023\uffe3\024" +
    "\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3" +
    "\033\067\034\066\040\uffe3\041\uffe3\042\uffe3\044\uffe3\046" +
    "\uffe3\050\uffe3\052\uffe3\053\uffe3\001\002\000\070\002\uffe2" +
    "\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\020" +
    "\uffe2\021\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2" +
    "\030\uffe2\031\uffe2\032\uffe2\033\067\034\066\040\uffe2\041" +
    "\uffe2\042\uffe2\044\uffe2\046\uffe2\050\uffe2\052\uffe2\053\uffe2" +
    "\001\002\000\034\002\ufff2\011\ufff2\012\ufff2\013\ufff2\014" +
    "\ufff2\031\ufff2\040\ufff2\041\ufff2\042\ufff2\044\ufff2\046\ufff2" +
    "\052\ufff2\053\ufff2\001\002\000\004\002\000\001\002\000" +
    "\004\014\015\001\002\000\004\043\107\001\002\000\014" +
    "\011\007\012\025\013\024\014\015\031\010\001\002\000" +
    "\006\020\053\032\111\001\002\000\004\051\112\001\002" +
    "\000\032\011\007\012\025\013\024\014\015\031\010\040" +
    "\011\041\046\042\037\044\012\046\032\052\uffbf\053\027" +
    "\001\002\000\004\052\115\001\002\000\004\052\uffc0\001" +
    "\002\000\034\002\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4" +
    "\031\uffc4\040\uffc4\041\uffc4\042\uffc4\044\uffc4\046\uffc4\052" +
    "\uffc4\053\uffc4\001\002\000\014\011\007\012\025\013\024" +
    "\014\015\031\010\001\002\000\016\011\007\012\025\013" +
    "\024\014\015\031\010\032\uffcd\001\002\000\004\032\125" +
    "\001\002\000\006\016\123\032\uffce\001\002\000\010\016" +
    "\uffc9\020\053\032\uffc9\001\002\000\014\011\007\012\025" +
    "\013\024\014\015\031\010\001\002\000\010\016\uffca\020" +
    "\053\032\uffca\001\002\000\004\015\126\001\002\000\004" +
    "\014\015\001\002\000\006\016\131\017\132\001\002\000" +
    "\006\016\uffef\017\uffef\001\002\000\004\014\015\001\002" +
    "\000\034\002\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\031" +
    "\ufff3\040\ufff3\041\ufff3\042\ufff3\044\ufff3\046\ufff3\052\ufff3" +
    "\053\ufff3\001\002\000\010\016\ufff0\017\ufff0\047\ufff0\001" +
    "\002\000\010\020\053\031\uffcc\050\uffcc\001\002\000\014" +
    "\011\007\012\025\013\024\014\015\031\010\001\002\000" +
    "\006\020\053\032\137\001\002\000\004\017\140\001\002" +
    "\000\034\002\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\031" +
    "\ufff1\040\ufff1\041\ufff1\042\ufff1\044\ufff1\046\ufff1\052\ufff1" +
    "\053\ufff1\001\002\000\036\002\ufff6\011\ufff6\012\ufff6\013" +
    "\ufff6\014\ufff6\020\053\031\ufff6\040\ufff6\041\ufff6\042\ufff6" +
    "\044\ufff6\046\ufff6\052\ufff6\053\ufff6\001\002\000\034\002" +
    "\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\031\ufffd\040\ufffd" +
    "\041\ufffd\042\ufffd\044\ufffd\046\ufffd\052\ufffd\053\ufffd\001" +
    "\002\000\016\003\144\004\152\005\151\006\150\007\145" +
    "\010\147\001\002\000\004\017\uffe9\001\002\000\004\017" +
    "\uffed\001\002\000\004\017\153\001\002\000\004\017\uffee" +
    "\001\002\000\004\017\uffec\001\002\000\004\017\uffeb\001" +
    "\002\000\004\017\uffea\001\002\000\034\002\ufff5\011\ufff5" +
    "\012\ufff5\013\ufff5\014\ufff5\031\ufff5\040\ufff5\041\ufff5\042" +
    "\ufff5\044\ufff5\046\ufff5\052\ufff5\053\ufff5\001\002\000\014" +
    "\011\007\012\025\013\024\014\015\031\010\001\002\000" +
    "\006\020\053\032\156\001\002\000\004\051\157\001\002" +
    "\000\032\011\007\012\025\013\024\014\015\031\010\040" +
    "\011\041\046\042\037\044\012\046\032\052\uffbf\053\027" +
    "\001\002\000\004\052\161\001\002\000\036\002\uffc1\011" +
    "\uffc1\012\uffc1\013\uffc1\014\uffc1\031\uffc1\040\uffc1\041\uffc1" +
    "\042\uffc1\044\uffc1\045\162\046\uffc1\052\uffc1\053\uffc1\001" +
    "\002\000\004\051\164\001\002\000\034\002\uffc3\011\uffc3" +
    "\012\uffc3\013\uffc3\014\uffc3\031\uffc3\040\uffc3\041\uffc3\042" +
    "\uffc3\044\uffc3\046\uffc3\052\uffc3\053\uffc3\001\002\000\032" +
    "\011\007\012\025\013\024\014\015\031\010\040\011\041" +
    "\046\042\037\044\012\046\032\052\uffbf\053\027\001\002" +
    "\000\004\052\166\001\002\000\034\002\uffc2\011\uffc2\012" +
    "\uffc2\013\uffc2\014\uffc2\031\uffc2\040\uffc2\041\uffc2\042\uffc2" +
    "\044\uffc2\046\uffc2\052\uffc2\053\uffc2\001\002\000\014\011" +
    "\007\012\025\013\024\014\015\031\010\001\002\000\006" +
    "\020\053\032\171\001\002\000\004\051\172\001\002\000" +
    "\032\011\007\012\025\013\024\014\015\031\010\040\011" +
    "\041\046\042\037\044\012\046\032\052\uffbf\053\027\001" +
    "\002\000\004\052\174\001\002\000\034\002\uffc5\011\uffc5" +
    "\012\uffc5\013\uffc5\014\uffc5\031\uffc5\040\uffc5\041\uffc5\042" +
    "\uffc5\044\uffc5\046\uffc5\052\uffc5\053\uffc5\001\002\000\006" +
    "\020\053\032\176\001\002\000\074\002\uffd3\011\uffd3\012" +
    "\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\020\uffd3\021\uffd3" +
    "\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031" +
    "\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\040\uffd3" +
    "\041\uffd3\042\uffd3\044\uffd3\046\uffd3\050\uffd3\052\uffd3\053" +
    "\uffd3\001\002\000\004\014\015\001\002\000\006\016\131" +
    "\017\201\001\002\000\034\002\ufff4\011\ufff4\012\ufff4\013" +
    "\ufff4\014\ufff4\031\ufff4\040\ufff4\041\ufff4\042\ufff4\044\ufff4" +
    "\046\ufff4\052\ufff4\053\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\177\000\062\002\042\003\021\004\017\005\044\006" +
    "\022\007\013\010\016\011\015\012\012\013\020\015\005" +
    "\016\043\017\041\020\037\021\035\022\034\023\030\024" +
    "\003\025\004\026\040\030\032\031\027\032\033\033\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\015\174\016\043\017\041" +
    "\020\037\021\035\022\034\023\047\024\003\025\004\026" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\005\141\006\022\007\013" +
    "\010\016\011\015\012\012\013\020\015\005\016\043\017" +
    "\041\020\037\021\035\022\034\023\030\024\003\025\004" +
    "\026\040\030\032\031\027\032\033\033\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\015" +
    "\140\016\043\017\041\020\037\021\035\022\034\023\047" +
    "\024\003\025\004\026\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\015\050\016\043\017\041\020\037" +
    "\021\035\022\034\023\047\024\003\025\004\026\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\016\053\017\041\020\037\021\035\022\034\023" +
    "\047\024\003\025\004\026\040\001\001\000\002\001\001" +
    "\000\022\017\055\020\037\021\035\022\034\023\047\024" +
    "\003\025\004\026\040\001\001\000\002\001\001\000\020" +
    "\020\101\021\035\022\034\023\047\024\003\025\004\026" +
    "\040\001\001\000\020\020\100\021\035\022\034\023\047" +
    "\024\003\025\004\026\040\001\001\000\020\020\077\021" +
    "\035\022\034\023\047\024\003\025\004\026\040\001\001" +
    "\000\020\020\076\021\035\022\034\023\047\024\003\025" +
    "\004\026\040\001\001\000\020\020\075\021\035\022\034" +
    "\023\047\024\003\025\004\026\040\001\001\000\020\020" +
    "\064\021\035\022\034\023\047\024\003\025\004\026\040" +
    "\001\001\000\002\001\001\000\016\021\074\022\034\023" +
    "\047\024\003\025\004\026\040\001\001\000\016\021\067" +
    "\022\034\023\047\024\003\025\004\026\040\001\001\000" +
    "\002\001\001\000\014\022\073\023\047\024\003\025\004" +
    "\026\040\001\001\000\014\022\072\023\047\024\003\025" +
    "\004\026\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\105\001\001\000" +
    "\002\001\001\000\026\015\107\016\043\017\041\020\037" +
    "\021\035\022\034\023\047\024\003\025\004\026\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\003\113" +
    "\004\017\005\044\006\022\007\013\010\016\011\015\012" +
    "\012\013\020\015\005\016\043\017\041\020\037\021\035" +
    "\022\034\023\030\024\003\025\004\026\040\030\032\031" +
    "\027\032\033\033\025\036\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\015\133\016" +
    "\043\017\041\020\037\021\035\022\034\023\047\024\003" +
    "\025\004\026\040\001\001\000\032\015\121\016\043\017" +
    "\041\020\037\021\035\022\034\023\047\024\003\025\004" +
    "\026\040\027\117\035\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\015\123\016\043" +
    "\017\041\020\037\021\035\022\034\023\047\024\003\025" +
    "\004\026\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\126\023\127\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\132\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\015\135\016" +
    "\043\017\041\020\037\021\035\022\034\023\047\024\003" +
    "\025\004\026\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\015\154\016\043\017\041\020\037\021\035\022\034" +
    "\023\047\024\003\025\004\026\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\003\113\004\017\005\044" +
    "\006\022\007\013\010\016\011\015\012\012\013\020\015" +
    "\005\016\043\017\041\020\037\021\035\022\034\023\030" +
    "\024\003\025\004\026\040\030\032\031\027\032\033\033" +
    "\025\036\157\001\001\000\002\001\001\000\004\034\162" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\003" +
    "\113\004\017\005\044\006\022\007\013\010\016\011\015" +
    "\012\012\013\020\015\005\016\043\017\041\020\037\021" +
    "\035\022\034\023\030\024\003\025\004\026\040\030\032" +
    "\031\027\032\033\033\025\036\164\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\015\167\016\043\017\041" +
    "\020\037\021\035\022\034\023\047\024\003\025\004\026" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\003\113\004\017\005\044\006\022\007\013\010\016\011" +
    "\015\012\012\013\020\015\005\016\043\017\041\020\037" +
    "\021\035\022\034\023\030\024\003\025\004\026\040\030" +
    "\032\031\027\032\033\033\025\036\172\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\177\023\127\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
    
    public HashMap<String,Sim> symtable = new HashMap<>();
    public LinkedList<Err> errors = new LinkedList<>();

    public Object[] pila = new Object[100];
    public int p = 0;
    


    public void report_error(String message, Object info){
        Err e = new Err(message,null,null);
        if(info instanceof java_cup.runtime.Symbol){
            e.setSym((java_cup.runtime.Symbol)info);
        }
        errors.add(e);
        e.println();
    }
    public void report_fatal_error(String message,Object info){
        report_error(message,info);
        errors.getLast().println();
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


    Sim getSim(String key){
        return parser.symtable.get(key);
    }
    Sim addSim(String name,String type,Object data){
        //pre
        System.out.println("Added Sim: " + name);
        //mid
        int pos = parser.p;
        String key = name;
        Sim val = new Sim(name,type,pos);
        parser.symtable.put(key,val);
        parser.pila[pos] = data;
        //post
        parser.p++;
        System.out.println("SimTable Size: " + parser.symtable.size());
        return val;
    }

    void report_error(String msg,Object info){
        parser.report_error(msg,info);
    }

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // control_body ::= 
            {
              Attr RESULT =null;
		RESULT = new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("control_body",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // control_body ::= input 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("control_body",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // elseif ::= 
            {
              Attr RESULT =null;
		RESULT = new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseif",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // elseif ::= ELSE LL1 control_body LL2 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseif",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // if ::= IF LP expr RP LL1 control_body LL2 elseif 
            {
              Attr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Attr e = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int x1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x1 = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Attr a = new Attr();
                        Nodo nodo = new Nodo(Nodo.OPERACION.IF,e.getNodo("nodo"),x.getNodo("nodo"));

                        a.set("nodo",nodo);
                        a.set("else",e.getNodo("nodo"));
                        RESULT = a;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // for ::= FOR LP id TO expr RP LL1 control_body LL2 
            {
              Attr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Attr id = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Attr e = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        Attr a = new Attr();
                        Nodo nodo = new Nodo(Nodo.OPERACION.FOR,e.getNodo("nodo"),x.getNodo("nodo"));

                        e.set("id",id);
                        a.set("nodo",nodo);
                        RESULT = a;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // while ::= WHILE LP expr RP LL1 control_body LL2 
            {
              Attr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Attr e = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        Attr a = new Attr();
                        Nodo nodo = new Nodo(Nodo.OPERACION.WHILE,e.getNodo("nodo"),x.getNodo("nodo"));

                        a.set("nodo",nodo);
                        RESULT = a;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // control ::= if 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("control",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // control ::= for 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("control",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // control ::= while 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("control",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr_list_p ::= expr 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Attr a = new Attr();
                        ArrayList<Attr> l = new ArrayList<>();
                        a.set("list",x);
                        RESULT = a;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list_p",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr_list_p ::= expr_list_p COMA expr 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        l.getList("list").add(x);
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list_p",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr_list ::= expr 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Boolean isId = x.getBoolean("id");
                        Attr a = new Attr();
                        if(x != null && isId ){
                            a.set("id",x);
                        } else {
                            report_error("Se esperaba un identificador",a.get("info"));
                        }
                        a.set("count",0);
                        RESULT = a;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr_list ::= expr_list PUNTO expr 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Boolean isId = x.getBoolean("id");
                        Integer count = l.getInteger("count")+1;
                        l.set("count",count);
                        if(x != null && isId ){

                            switch(count){
                                case 1:
                                    l.set("funcion",x);
                                break;
                                default:
                                    report_error("No existe funcion asociada.",x.get("info"));
                            }


                        } else {
                            report_error("Se esperaba un identificador",x.get("info"));
                        }
    
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // params ::= 
            {
              Attr RESULT =null;
		RESULT = new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // params ::= expr_list_p 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // id ::= ID 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    String key = x;
                                    String type = null;
                                    boolean exists = false;

                                    Sim sim = getSim(key);

                                    if(sim != null){
                                        type = sim.getType();
                                        exists = true;
                                    }


                                    Attr a = new Attr();
                                    a.set("val",key);
                                    a.set("type",type);
                                    a.set("id",true);
                                    a.set("exists",exists);
                                    a.set("info",CUP$Parser$stack.peek());
                                    a.set("nodo",new Nodo(a.get("info"),true));
                                    RESULT = a;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // int ::= INT 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    Attr a = new Attr();
                                    a.set("val",x);
                                    a.set("type","int");
                                    a.set("info",CUP$Parser$stack.peek());
                                    a.set("nodo",new Nodo(a.get("info"),false));
                                    RESULT = a;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("int",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // string ::= STRING 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    Attr a = new Attr();
                                    a.set("val",x);
                                    a.set("type","string");
                                    a.set("info",CUP$Parser$stack.peek());
                                    a.set("nodo",new Nodo(a.get("info"),false));
                                    RESULT = a;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // boolean ::= BOOLEAN 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    Attr a = new Attr();

                                    a.set("val",x);
                                    a.set("type","boolean");
                                    a.set("info",CUP$Parser$stack.peek());
                                    a.set("nodo",new Nodo(a.get("info"),false));
                                    RESULT = a;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr5 ::= LP expr RP 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr5",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr5 ::= int 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr5",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr5 ::= string 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr5",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr5 ::= boolean 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr5",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr5 ::= id 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr5",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr4 ::= expr5 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr4",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr4 ::= expr4 DIV expr5 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo(Nodo.OPERACION.DIVISION,l.getNodo("nodo"),x.getNodo("nodo"));
                        l.set("nodo",nodo);
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr4",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr4 ::= expr4 MULTI expr5 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo(Nodo.OPERACION.MULTIPLICACION,l.getNodo("nodo"),x.getNodo("nodo"));
                        l.set("nodo",nodo);
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr4",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr3 ::= expr4 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr3",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr3 ::= expr3 MINUS expr4 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo(Nodo.OPERACION.RESTA,l.getNodo("nodo"),x.getNodo("nodo"));
                        l.set("nodo",nodo);
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr3",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr3 ::= expr3 PLUS expr4 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo(Nodo.OPERACION.SUMA,l.getNodo("nodo"),x.getNodo("nodo"));
                        l.set("nodo",nodo);
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr3",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr2 ::= expr3 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr2",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr2 ::= expr2 NEQUAL expr3 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo(Nodo.OPERACION.NEQUAL,l.getNodo("nodo"),x.getNodo("nodo"));
                        l.set("nodo",nodo);
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr2",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr2 ::= expr2 DEQUAL expr3 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo(Nodo.OPERACION.DEQUAL,l.getNodo("nodo"),x.getNodo("nodo"));
                        l.set("nodo",nodo);
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr2",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr2 ::= expr2 BTHAN expr3 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo(Nodo.OPERACION.BTHAN,l.getNodo("nodo"),x.getNodo("nodo"));
                        l.set("nodo",nodo);
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr2",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr2 ::= expr2 LTHAN expr3 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo(Nodo.OPERACION.LTHAN,l.getNodo("nodo"),x.getNodo("nodo"));
                        l.set("nodo",nodo);
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr2",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr2 ::= expr2 BETHAN expr3 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo(Nodo.OPERACION.BETHAN,l.getNodo("nodo"),x.getNodo("nodo"));
                        l.set("nodo",nodo);
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr2",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr2 ::= expr2 LETHAN expr3 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo(Nodo.OPERACION.LETHAN,l.getNodo("nodo"),x.getNodo("nodo"));
                        l.set("nodo",nodo);
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr2",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr1 ::= expr2 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr1",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr1 ::= expr1 AND expr2 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo(Nodo.OPERACION.AND,l.getNodo("nodo"),x.getNodo("nodo"));
                        l.set("nodo",nodo);
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr1",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= expr1 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= expr OR expr1 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo(Nodo.OPERACION.OR,l.getNodo("nodo"),x.getNodo("nodo"));
                        l.set("nodo",nodo);
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipo ::= error 
            {
              Attr RESULT =null;
		RESULT = new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipo ::= KW_INT 
            {
              Attr RESULT =null;
		RESULT = new Attr("tipo","int");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipo ::= KW_STRING 
            {
              Attr RESULT =null;
		RESULT = new Attr("tipo","string");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo ::= KW_BOOLEAN 
            {
              Attr RESULT =null;
		RESULT = new Attr("tipo","boolean");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo ::= KW_QUEUE 
            {
              Attr RESULT =null;
		RESULT = new Attr("tipo","queue");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo ::= KW_LIST 
            {
              Attr RESULT =null;
		RESULT = new Attr("tipo","list");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // id_list ::= id 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Attr a = new Attr("list",new ArrayList<Attr>());
                        a.getList("list").add(x);
                        RESULT = a;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // id_list ::= id_list COMA id 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int x1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x1 = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        x.getList("list").add(x1);
                        RESULT = x;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // enviar ::= SEND LP expr RP PCOMA 
            {
              Attr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr e = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    Attr a = new Attr();
                    Nodo nodo = new Nodo(Nodo.OPERACION.ENVIAR,e.getNodo("nodo"),null);

                    a.set("nodo",nodo);
                    RESULT = a;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enviar",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // esperar ::= WAIT LP expr RP PCOMA 
            {
              Attr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr e = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    Attr a = new Attr();
                    Nodo nodo = new Nodo(Nodo.OPERACION.ESPERAR,e.getNodo("nodo"),null);

                    a.set("nodo",nodo);
                    RESULT = a;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("esperar",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // asignacion ::= expr_list LP params RP EQUAL id_list PCOMA 
            {
              Attr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Attr e = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Attr p = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    Integer count = e.getInteger("count");
                    if(count == 1){
                        
                        e.set("params",p.getList("list"));
                        e.set("list",l.get("list"));

                        Nodo left = new Nodo(e,false);
                        Nodo nodo = new Nodo(Nodo.OPERACION.ASIGNACION,left,null);

                        e.set("nodo",nodo);
                    }   
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // asignacion ::= expr EQUAL id_list PCOMA 
            {
              Attr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Attr e = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    
                    
                    Nodo nodo = new Nodo(Nodo.OPERACION.ASIGNACION,e.getNodo("nodo"),null);

                    e.set("list",l.getList("list"));
                    e.set("nodo",nodo);
                    RESULT = e;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion ::= id_list IS tipo PCOMA 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr t = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    for(Attr a : l.getList("list")){

                        String name = a.getString("val");
                        String type = t.getString("type");


                        if(getSim(name) == null){
                            if(type == null){
                                addSim(name,type,null);
                            }
                        } else{
                            report_error("Ya existe la variable '" + name + "'", a.getSymbol("info"));
                        }
                    }               

                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= PRINTLN expr 
            {
              Attr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr e = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    Attr a = new Attr();
                    a.set("nodo",new Nodo(Nodo.OPERACION.PRINTLN,e.getNodo("nodo"),null));

                    RESULT = a;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= control 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= enviar 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= esperar 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= asignacion 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= declaracion 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt_list ::= stmt 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    Attr a = new Attr();
                    a.set("nodo",new Nodo(Nodo.OPERACION.STMT,x.getNodo("nodo"),null));
                    RESULT = a;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt_list ::= stmt_list stmt 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    l.set("nodo",new Nodo(Nodo.OPERACION.STMT,l.getNodo("nodo"),x.getNodo("nodo")));
                    RESULT = l;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // input ::= stmt_list 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("input",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // begin ::= 
            {
              Attr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("begin",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= begin EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr start_val = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // begin ::= input 
            {
              Attr RESULT =null;
		System.out.println("Compiled...");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("begin",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

