
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Dec 21 17:47:29 CST 2013
//----------------------------------------------------

package com.github.mensajeria.compiler.proem;

import com.github.mensajeria.compiler.Sim;
import com.github.mensajeria.compiler.Attr;
import com.github.mensajeria.compiler.Err;
import com.github.mensajeria.compiler.Nodo;
import java.io.File;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.HashSet;
import java.lang.Thread.State;
import java.awt.Dimension;
import java.awt.Point;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Dec 21 17:47:29 CST 2013
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\002\003\000\002\002\004\000\002\002" +
    "\002\000\002\003\003\000\002\004\004\000\002\004\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\037\005\000\002\006\006\000\002\007\006\000\002\007" +
    "\011\000\002\012\007\000\002\013\007\000\002\011\005" +
    "\000\002\011\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\015\005\000\002\015\003\000\002\016" +
    "\005\000\002\016\003\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\003\000\002\020\005\000\002" +
    "\020\005\000\002\020\003\000\002\021\005\000\002\021" +
    "\005\000\002\021\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\005\000" +
    "\002\026\003\000\002\024\003\000\002\025\003\000\002" +
    "\023\003\000\002\027\003\000\002\027\002\000\002\030" +
    "\005\000\002\030\003\000\002\035\005\000\002\035\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\031\011\000\002\032\013\000\002\033\012\000\002" +
    "\034\006\000\002\034\002\000\002\036\003\000\002\036" +
    "\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\032\002\uffff\011\005\012\034\013\021\014" +
    "\017\031\013\040\032\041\020\042\007\044\015\046\040" +
    "\053\006\001\002\000\004\002\001\001\002\000\046\015" +
    "\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\023\uffcf\024\uffcf" +
    "\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033" +
    "\uffcf\034\uffcf\035\uffcf\036\uffcf\050\uffcf\001\002\000\014" +
    "\011\005\012\034\013\021\014\017\031\013\001\002\000" +
    "\004\031\172\001\002\000\046\015\uffd4\016\uffd4\017\uffd4" +
    "\020\uffd4\021\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027" +
    "\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4" +
    "\036\uffd4\050\uffd4\001\002\000\004\002\171\001\002\000" +
    "\006\016\114\047\160\001\002\000\014\011\005\012\034" +
    "\013\021\014\017\031\013\001\002\000\034\002\ufff9\011" +
    "\ufff9\012\ufff9\013\ufff9\014\ufff9\031\ufff9\040\ufff9\041\ufff9" +
    "\042\ufff9\044\ufff9\046\ufff9\052\ufff9\053\ufff9\001\002\000" +
    "\004\031\143\001\002\000\034\002\ufff8\011\ufff8\012\ufff8" +
    "\013\ufff8\014\ufff8\031\ufff8\040\ufff8\041\ufff8\042\ufff8\044" +
    "\ufff8\046\ufff8\052\ufff8\053\ufff8\001\002\000\052\015\uffce" +
    "\016\uffce\017\uffce\020\uffce\021\uffce\023\uffce\024\uffce\025" +
    "\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce" +
    "\034\uffce\035\uffce\036\uffce\043\uffce\047\uffce\050\uffce\001" +
    "\002\000\004\031\137\001\002\000\046\015\uffd1\016\uffd1" +
    "\017\uffd1\020\uffd1\021\uffd1\023\uffd1\024\uffd1\025\uffd1\026" +
    "\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1" +
    "\035\uffd1\036\uffd1\050\uffd1\001\002\000\034\002\ufff7\011" +
    "\ufff7\012\ufff7\013\ufff7\014\ufff7\031\ufff7\040\ufff7\041\ufff7" +
    "\042\ufff7\044\ufff7\046\ufff7\052\ufff7\053\ufff7\001\002\000" +
    "\034\002\ufffe\011\005\012\034\013\021\014\017\031\013" +
    "\040\032\041\020\042\007\044\015\046\040\052\ufffe\053" +
    "\006\001\002\000\034\002\uffc7\011\uffc7\012\uffc7\013\uffc7" +
    "\014\uffc7\031\uffc7\040\uffc7\041\uffc7\042\uffc7\044\uffc7\046" +
    "\uffc7\052\uffc7\053\uffc7\001\002\000\034\002\uffc5\011\uffc5" +
    "\012\uffc5\013\uffc5\014\uffc5\031\uffc5\040\uffc5\041\uffc5\042" +
    "\uffc5\044\uffc5\046\uffc5\052\uffc5\053\uffc5\001\002\000\044" +
    "\015\uffd6\016\uffee\020\uffd6\021\uffd6\023\uffd6\024\uffd6\025" +
    "\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\033\uffd6\034\uffd6" +
    "\035\uffd6\036\uffd6\047\uffee\050\uffd6\001\002\000\034\002" +
    "\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\031\ufff6\040\ufff6" +
    "\041\ufff6\042\ufff6\044\ufff6\046\ufff6\052\ufff6\053\ufff6\001" +
    "\002\000\046\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3" +
    "\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031" +
    "\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\050\uffd3" +
    "\001\002\000\034\002\uffc6\011\uffc6\012\uffc6\013\uffc6\014" +
    "\uffc6\031\uffc6\040\uffc6\041\uffc6\042\uffc6\044\uffc6\046\uffc6" +
    "\052\uffc6\053\uffc6\001\002\000\004\031\127\001\002\000" +
    "\012\015\124\020\056\031\uffca\050\uffca\001\002\000\046" +
    "\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\023\uffd0\024" +
    "\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0" +
    "\033\uffd0\034\uffd0\035\uffd0\036\uffd0\050\uffd0\001\002\000" +
    "\046\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\023\uffd7" +
    "\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032" +
    "\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\050\uffd7\001\002" +
    "\000\046\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\023" +
    "\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda" +
    "\032\uffda\033\uffda\034\uffda\035\075\036\074\050\uffda\001" +
    "\002\000\042\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd" +
    "\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031" +
    "\uffdd\032\uffdd\033\072\034\071\050\uffdd\001\002\000\004" +
    "\031\120\001\002\000\036\015\uffe4\016\uffe4\017\uffe4\020" +
    "\uffe4\021\uffe4\023\064\024\067\025\066\026\062\027\063" +
    "\030\065\031\uffe4\032\uffe4\050\uffe4\001\002\000\034\002" +
    "\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\031\ufffb\040\ufffb" +
    "\041\ufffb\042\ufffb\044\ufffb\046\ufffb\052\ufffb\053\ufffb\001" +
    "\002\000\022\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\060" +
    "\031\uffe6\032\uffe6\050\uffe6\001\002\000\034\002\ufffa\011" +
    "\ufffa\012\ufffa\013\ufffa\014\ufffa\031\ufffa\040\ufffa\041\ufffa" +
    "\042\ufffa\044\ufffa\046\ufffa\052\ufffa\053\ufffa\001\002\000" +
    "\006\031\051\050\050\001\002\000\034\002\ufffc\011\ufffc" +
    "\012\ufffc\013\ufffc\014\ufffc\031\ufffc\040\ufffc\041\ufffc\042" +
    "\ufffc\044\ufffc\046\ufffc\052\ufffc\053\ufffc\001\002\000\046" +
    "\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\023\uffd5\024" +
    "\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5" +
    "\033\uffd5\034\uffd5\035\uffd5\036\uffd5\050\uffd5\001\002\000" +
    "\014\011\005\012\034\013\021\014\017\031\013\001\002" +
    "\000\016\011\005\012\034\013\021\014\017\031\013\032" +
    "\uffcc\001\002\000\046\015\uffd6\016\uffd6\017\uffd6\020\uffd6" +
    "\021\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030" +
    "\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6" +
    "\050\uffd6\001\002\000\004\032\110\001\002\000\006\016" +
    "\106\032\uffcd\001\002\000\010\016\uffc8\020\056\032\uffc8" +
    "\001\002\000\014\011\005\012\034\013\021\014\017\031" +
    "\013\001\002\000\022\015\uffe7\016\uffe7\017\uffe7\020\uffe7" +
    "\021\060\031\uffe7\032\uffe7\050\uffe7\001\002\000\014\011" +
    "\005\012\034\013\021\014\017\031\013\001\002\000\036" +
    "\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\023\064\024" +
    "\067\025\066\026\062\027\063\030\065\031\uffe5\032\uffe5" +
    "\050\uffe5\001\002\000\014\011\005\012\034\013\021\014" +
    "\017\031\013\001\002\000\014\011\005\012\034\013\021" +
    "\014\017\031\013\001\002\000\014\011\005\012\034\013" +
    "\021\014\017\031\013\001\002\000\014\011\005\012\034" +
    "\013\021\014\017\031\013\001\002\000\014\011\005\012" +
    "\034\013\021\014\017\031\013\001\002\000\014\011\005" +
    "\012\034\013\021\014\017\031\013\001\002\000\042\015" +
    "\uffde\016\uffde\017\uffde\020\uffde\021\uffde\023\uffde\024\uffde" +
    "\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033" +
    "\072\034\071\050\uffde\001\002\000\014\011\005\012\034" +
    "\013\021\014\017\031\013\001\002\000\014\011\005\012" +
    "\034\013\021\014\017\031\013\001\002\000\046\015\uffdb" +
    "\016\uffdb\017\uffdb\020\uffdb\021\uffdb\023\uffdb\024\uffdb\025" +
    "\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb" +
    "\034\uffdb\035\075\036\074\050\uffdb\001\002\000\014\011" +
    "\005\012\034\013\021\014\017\031\013\001\002\000\014" +
    "\011\005\012\034\013\021\014\017\031\013\001\002\000" +
    "\046\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\023\uffd9" +
    "\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032" +
    "\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\050\uffd9\001\002" +
    "\000\046\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\023" +
    "\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8" +
    "\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\050\uffd8\001" +
    "\002\000\046\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc" +
    "\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031" +
    "\uffdc\032\uffdc\033\uffdc\034\uffdc\035\075\036\074\050\uffdc" +
    "\001\002\000\042\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021" +
    "\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0" +
    "\031\uffe0\032\uffe0\033\072\034\071\050\uffe0\001\002\000" +
    "\042\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\023\uffe3" +
    "\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032" +
    "\uffe3\033\072\034\071\050\uffe3\001\002\000\042\015\uffdf" +
    "\016\uffdf\017\uffdf\020\uffdf\021\uffdf\023\uffdf\024\uffdf\025" +
    "\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\072" +
    "\034\071\050\uffdf\001\002\000\042\015\uffe2\016\uffe2\017" +
    "\uffe2\020\uffe2\021\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2" +
    "\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\072\034\071\050" +
    "\uffe2\001\002\000\042\015\uffe1\016\uffe1\017\uffe1\020\uffe1" +
    "\021\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030" +
    "\uffe1\031\uffe1\032\uffe1\033\072\034\071\050\uffe1\001\002" +
    "\000\014\011\005\012\034\013\021\014\017\031\013\001" +
    "\002\000\010\016\uffc9\020\056\032\uffc9\001\002\000\004" +
    "\015\111\001\002\000\004\014\017\001\002\000\006\016" +
    "\114\017\115\001\002\000\006\016\uffee\017\uffee\001\002" +
    "\000\004\014\017\001\002\000\034\002\ufff2\011\ufff2\012" +
    "\ufff2\013\ufff2\014\ufff2\031\ufff2\040\ufff2\041\ufff2\042\ufff2" +
    "\044\ufff2\046\ufff2\052\ufff2\053\ufff2\001\002\000\010\016" +
    "\uffef\017\uffef\047\uffef\001\002\000\010\020\056\031\uffcb" +
    "\050\uffcb\001\002\000\014\011\005\012\034\013\021\014" +
    "\017\031\013\001\002\000\006\020\056\032\122\001\002" +
    "\000\004\017\123\001\002\000\034\002\ufff0\011\ufff0\012" +
    "\ufff0\013\ufff0\014\ufff0\031\ufff0\040\ufff0\041\ufff0\042\ufff0" +
    "\044\ufff0\046\ufff0\052\ufff0\053\ufff0\001\002\000\004\014" +
    "\017\001\002\000\006\016\114\017\126\001\002\000\034" +
    "\002\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\031\ufff3\040" +
    "\ufff3\041\ufff3\042\ufff3\044\ufff3\046\ufff3\052\ufff3\053\ufff3" +
    "\001\002\000\014\011\005\012\034\013\021\014\017\031" +
    "\013\001\002\000\006\020\056\032\131\001\002\000\004" +
    "\051\132\001\002\000\032\011\005\012\034\013\021\014" +
    "\017\031\013\040\032\041\020\042\007\044\015\046\040" +
    "\052\uffbe\053\006\001\002\000\004\052\uffbf\001\002\000" +
    "\004\052\135\001\002\000\034\002\uffc4\011\uffc4\012\uffc4" +
    "\013\uffc4\014\uffc4\031\uffc4\040\uffc4\041\uffc4\042\uffc4\044" +
    "\uffc4\046\uffc4\052\uffc4\053\uffc4\001\002\000\034\002\ufffd" +
    "\011\ufffd\012\ufffd\013\ufffd\014\ufffd\031\ufffd\040\ufffd\041" +
    "\ufffd\042\ufffd\044\ufffd\046\ufffd\052\ufffd\053\ufffd\001\002" +
    "\000\014\011\005\012\034\013\021\014\017\031\013\001" +
    "\002\000\006\020\056\032\141\001\002\000\004\017\142" +
    "\001\002\000\034\002\ufff1\011\ufff1\012\ufff1\013\ufff1\014" +
    "\ufff1\031\ufff1\040\ufff1\041\ufff1\042\ufff1\044\ufff1\046\ufff1" +
    "\052\ufff1\053\ufff1\001\002\000\014\011\005\012\034\013" +
    "\021\014\017\031\013\001\002\000\006\020\056\032\145" +
    "\001\002\000\004\051\146\001\002\000\032\011\005\012" +
    "\034\013\021\014\017\031\013\040\032\041\020\042\007" +
    "\044\015\046\040\052\uffbe\053\006\001\002\000\004\052" +
    "\150\001\002\000\036\002\uffc0\011\uffc0\012\uffc0\013\uffc0" +
    "\014\uffc0\031\uffc0\040\uffc0\041\uffc0\042\uffc0\044\uffc0\045" +
    "\151\046\uffc0\052\uffc0\053\uffc0\001\002\000\004\051\153" +
    "\001\002\000\034\002\uffc2\011\uffc2\012\uffc2\013\uffc2\014" +
    "\uffc2\031\uffc2\040\uffc2\041\uffc2\042\uffc2\044\uffc2\046\uffc2" +
    "\052\uffc2\053\uffc2\001\002\000\032\011\005\012\034\013" +
    "\021\014\017\031\013\040\032\041\020\042\007\044\015" +
    "\046\040\052\uffbe\053\006\001\002\000\004\052\155\001" +
    "\002\000\034\002\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1" +
    "\031\uffc1\040\uffc1\041\uffc1\042\uffc1\044\uffc1\046\uffc1\052" +
    "\uffc1\053\uffc1\001\002\000\006\020\056\032\157\001\002" +
    "\000\046\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\023" +
    "\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2" +
    "\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\050\uffd2\001" +
    "\002\000\016\003\161\004\167\005\166\006\165\007\162" +
    "\010\164\001\002\000\004\017\uffe8\001\002\000\004\017" +
    "\uffec\001\002\000\004\017\170\001\002\000\004\017\uffed" +
    "\001\002\000\004\017\uffeb\001\002\000\004\017\uffea\001" +
    "\002\000\004\017\uffe9\001\002\000\034\002\ufff4\011\ufff4" +
    "\012\ufff4\013\ufff4\014\ufff4\031\ufff4\040\ufff4\041\ufff4\042" +
    "\ufff4\044\ufff4\046\ufff4\052\ufff4\053\ufff4\001\002\000\004" +
    "\002\000\001\002\000\004\014\017\001\002\000\004\043" +
    "\174\001\002\000\014\011\005\012\034\013\021\014\017" +
    "\031\013\001\002\000\006\020\056\032\176\001\002\000" +
    "\004\051\177\001\002\000\032\011\005\012\034\013\021" +
    "\014\017\031\013\040\032\041\020\042\007\044\015\046" +
    "\040\052\uffbe\053\006\001\002\000\004\052\201\001\002" +
    "\000\034\002\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\031" +
    "\uffc3\040\uffc3\041\uffc3\042\uffc3\044\uffc3\046\uffc3\052\uffc3" +
    "\053\uffc3\001\002\000\006\017\203\020\056\001\002\000" +
    "\034\002\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\031\ufff5" +
    "\040\ufff5\041\ufff5\042\ufff5\044\ufff5\046\ufff5\052\ufff5\053" +
    "\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\064\002\010\003\003\004\022\005\045\006" +
    "\041\007\043\010\021\011\011\012\013\013\015\015\032" +
    "\016\042\017\040\020\036\021\035\022\034\023\025\024" +
    "\007\025\027\026\046\030\044\031\023\032\030\033\024" +
    "\037\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\015\201\016\042\017\040\020\036\021\035\022\034" +
    "\023\051\024\007\025\027\026\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\015\155\016\042\017\040\020\036\021\035\022" +
    "\034\023\051\024\007\025\027\026\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\005\135\006\041\007\043\010\021\011\011\012" +
    "\013\013\015\015\032\016\042\017\040\020\036\021\035" +
    "\022\034\023\025\024\007\025\027\026\046\030\044\031" +
    "\023\032\030\033\024\037\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\015\116\016\042\017\040\020\036\021\035\022\034\023" +
    "\051\024\007\025\027\026\046\001\001\000\032\015\054" +
    "\016\042\017\040\020\036\021\035\022\034\023\051\024" +
    "\007\025\027\026\046\027\052\035\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\016\056\017\040\020\036\021\035\022\034" +
    "\023\051\024\007\025\027\026\046\001\001\000\002\001" +
    "\001\000\022\017\060\020\036\021\035\022\034\023\051" +
    "\024\007\025\027\026\046\001\001\000\002\001\001\000" +
    "\020\020\104\021\035\022\034\023\051\024\007\025\027" +
    "\026\046\001\001\000\020\020\103\021\035\022\034\023" +
    "\051\024\007\025\027\026\046\001\001\000\020\020\102" +
    "\021\035\022\034\023\051\024\007\025\027\026\046\001" +
    "\001\000\020\020\101\021\035\022\034\023\051\024\007" +
    "\025\027\026\046\001\001\000\020\020\100\021\035\022" +
    "\034\023\051\024\007\025\027\026\046\001\001\000\020" +
    "\020\067\021\035\022\034\023\051\024\007\025\027\026" +
    "\046\001\001\000\002\001\001\000\016\021\077\022\034" +
    "\023\051\024\007\025\027\026\046\001\001\000\016\021" +
    "\072\022\034\023\051\024\007\025\027\026\046\001\001" +
    "\000\002\001\001\000\014\022\076\023\051\024\007\025" +
    "\027\026\046\001\001\000\014\022\075\023\051\024\007" +
    "\025\027\026\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\015\106\016\042\017\040\020\036\021\035\022\034" +
    "\023\051\024\007\025\027\026\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\111\023\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\015\120\016\042\017\040\020\036\021\035\022" +
    "\034\023\051\024\007\025\027\026\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\124\023\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\015\127\016\042\017\040\020\036\021\035\022" +
    "\034\023\051\024\007\025\027\026\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\064\003\132\004\022\005" +
    "\045\006\041\007\043\010\021\011\011\012\013\013\015" +
    "\015\032\016\042\017\040\020\036\021\035\022\034\023" +
    "\025\024\007\025\027\026\046\030\044\031\023\032\030" +
    "\033\024\036\133\037\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\015\137\016\042\017\040\020\036\021\035\022\034\023" +
    "\051\024\007\025\027\026\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\015\143\016" +
    "\042\017\040\020\036\021\035\022\034\023\051\024\007" +
    "\025\027\026\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\064\003\132\004\022\005\045\006\041\007\043" +
    "\010\021\011\011\012\013\013\015\015\032\016\042\017" +
    "\040\020\036\021\035\022\034\023\025\024\007\025\027" +
    "\026\046\030\044\031\023\032\030\033\024\036\146\037" +
    "\026\001\001\000\002\001\001\000\004\034\151\001\001" +
    "\000\002\001\001\000\002\001\001\000\064\003\132\004" +
    "\022\005\045\006\041\007\043\010\021\011\011\012\013" +
    "\013\015\015\032\016\042\017\040\020\036\021\035\022" +
    "\034\023\025\024\007\025\027\026\046\030\044\031\023" +
    "\032\030\033\024\036\153\037\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\172\001\001\000\002\001\001" +
    "\000\026\015\174\016\042\017\040\020\036\021\035\022" +
    "\034\023\051\024\007\025\027\026\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\064\003\132\004\022\005" +
    "\045\006\041\007\043\010\021\011\011\012\013\013\015" +
    "\015\032\016\042\017\040\020\036\021\035\022\034\023" +
    "\025\024\007\025\027\026\046\030\044\031\023\032\030" +
    "\033\024\036\177\037\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
    public LinkedList<Err> errors = new LinkedList<>();
    public LinkedList<Nodo> nodos = new LinkedList<>();

    public void report_error(String message, Object info){
        Err e = new Err(message,null,null);

        if(info instanceof java_cup.runtime.Symbol){
            e.setSym((java_cup.runtime.Symbol)info);
        }
        errors.add(e);
    }
    public void report_fatal_error(String message,Object info){
        report_error(message,info);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {



    void report_error(String msg,Object info){
        parser.report_error(msg,info);
    }

    LinkedList<Err> getErrs(){
        return parser.errors;
    }
    void addNodo(Nodo nodo){
        parser.nodos.add(nodo);
    }

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // control_body ::= 
            {
              Attr RESULT =null;
		RESULT = new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("control_body",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // control_body ::= input 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("control_body",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // elseif ::= 
            {
              Attr RESULT =null;
		RESULT = new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseif",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // elseif ::= ELSE LL1 control_body LL2 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseif",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // if ::= IF LP expr RP LL1 control_body LL2 elseif 
            {
              Attr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Attr e = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int x1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x1 = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Attr val = new Attr();

                        val.set("if",x.getNodo("nodo"));
                        val.set("else",x1.getNodo("nodo"));

                        Nodo nodo = new Nodo(
                                            Nodo.OPERACION.IF,
                                            new Nodo(new Attr("val",e),false),
                                            new Nodo(new Attr("val",val),false)
                                            );

                        RESULT = new Attr("nodo",nodo);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // for ::= FOR LP id TO expr RP LL1 control_body LL2 
            {
              Attr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Attr id = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Attr e = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		

                        Attr val = new Attr();
                        val.set("id",id);
                        val.set("expr",e.getNodo("nodo"));
                        Nodo nodo = new Nodo(
                                            Nodo.OPERACION.FOR,
                                            new Nodo(new Attr("val",val),false),
                                            new Nodo(new Attr("val",x),false)
                                            );
                        RESULT = new Attr("nodo",nodo);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // while ::= WHILE LP expr RP LL1 control_body LL2 
            {
              Attr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Attr e = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        Nodo nodo = new Nodo(
                                            Nodo.OPERACION.WHILE,
                                            new Nodo(new Attr("val",e),false),
                                            new Nodo(new Attr("val",x),false)
                                            );
                        RESULT = new Attr("nodo",nodo); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // control ::= if 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("control",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // control ::= for 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("control",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // control ::= while 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("control",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr_list_p ::= expr 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Attr a = new Attr();
                        ArrayList<Attr> l = new ArrayList<>();
                        a.set("list",x);
                        RESULT = a;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list_p",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr_list_p ::= expr_list_p COMA expr 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        l.getList("list").add(x);
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list_p",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr_list ::= expr 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Boolean isId = x.getBoolean("id");
                        Attr a = new Attr();
                        if(x != null && isId ){
                            a.set("id",x);
                        } else {
                            report_error("Se esperaba un identificador",a.get("info"));
                        }
                        a.set("count",0);
                        RESULT = a;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr_list ::= expr_list PUNTO expr 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Boolean isId = x.getBoolean("id");
                        Integer count = l.getInteger("count")+1;
                        l.set("count",count);
                        if(x != null && isId ){

                            switch(count){
                                case 1:
                                    l.set("funcion",x);
                                break;
                                default:
                                    report_error("No existe funcion asociada.",x.get("info"));
                            }


                        } else {
                            report_error("Se esperaba un identificador",x.get("info"));
                        }
    
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // params ::= 
            {
              Attr RESULT =null;
		RESULT = new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // params ::= expr_list_p 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // id ::= ID 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    String key = x;
                                    String tipo = null;
                                    boolean exists = false;


                                    Attr a = new Attr();
                                    a.set("val",key);
                                    a.set("tipo",tipo);
                                    a.set("id",true);
                                    a.set("exists",exists);
                                    a.set("info",CUP$Parser$stack.peek());
                                    a.set("nodo",new Nodo(a,true));
                                    RESULT = a;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // int ::= INT 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    Attr a = new Attr();
                                    a.set("val",x);
                                    a.set("tipo","int");
                                    a.set("info",CUP$Parser$stack.peek());
                                    a.set("nodo",new Nodo(a,false));
                                    RESULT = a;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("int",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // string ::= STRING 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    Attr a = new Attr();
                                    a.set("val",x);
                                    a.set("tipo","string");
                                    a.set("info",CUP$Parser$stack.peek());
                                    a.set("nodo",new Nodo(a,false));
                                    RESULT = a;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // boolean ::= BOOLEAN 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    Attr a = new Attr();

                                    a.set("val",x);
                                    a.set("tipo","boolean");
                                    a.set("info",CUP$Parser$stack.peek());
                                    a.set("nodo",new Nodo(a,false));
                                    RESULT = a;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr5 ::= LP expr RP 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr5",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr5 ::= int 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr5",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr5 ::= string 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr5",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr5 ::= boolean 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr5",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr5 ::= id 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr5",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr4 ::= expr5 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr4",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr4 ::= expr4 DIV expr5 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo(Nodo.OPERACION.DIVISION,l.getNodo("nodo"),x.getNodo("nodo"));
                        l.set("nodo",nodo);
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr4",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr4 ::= expr4 MULTI expr5 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo(Nodo.OPERACION.MULTIPLICACION,l.getNodo("nodo"),x.getNodo("nodo"));
                        l.set("nodo",nodo);
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr4",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr3 ::= expr4 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr3",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr3 ::= expr3 MINUS expr4 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo(Nodo.OPERACION.RESTA,l.getNodo("nodo"),x.getNodo("nodo"));
                        l.set("nodo",nodo);
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr3",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr3 ::= expr3 PLUS expr4 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo(Nodo.OPERACION.SUMA,l.getNodo("nodo"),x.getNodo("nodo"));
                        l.set("nodo",nodo);
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr3",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr2 ::= expr3 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr2",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr2 ::= expr2 NEQUAL expr3 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo(Nodo.OPERACION.NEQUAL,l.getNodo("nodo"),x.getNodo("nodo"));
                        l.set("nodo",nodo);
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr2",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr2 ::= expr2 DEQUAL expr3 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo(Nodo.OPERACION.DEQUAL,l.getNodo("nodo"),x.getNodo("nodo"));
                        l.set("nodo",nodo);
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr2",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr2 ::= expr2 BTHAN expr3 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo(Nodo.OPERACION.BTHAN,l.getNodo("nodo"),x.getNodo("nodo"));
                        l.set("nodo",nodo);
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr2",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr2 ::= expr2 LTHAN expr3 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo(Nodo.OPERACION.LTHAN,l.getNodo("nodo"),x.getNodo("nodo"));
                        l.set("nodo",nodo);
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr2",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr2 ::= expr2 BETHAN expr3 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo(Nodo.OPERACION.BETHAN,l.getNodo("nodo"),x.getNodo("nodo"));
                        l.set("nodo",nodo);
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr2",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr2 ::= expr2 LETHAN expr3 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo(Nodo.OPERACION.LETHAN,l.getNodo("nodo"),x.getNodo("nodo"));
                        l.set("nodo",nodo);
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr2",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr1 ::= expr2 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr1",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr1 ::= expr1 AND expr2 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo(Nodo.OPERACION.AND,l.getNodo("nodo"),x.getNodo("nodo"));
                        l.set("nodo",nodo);
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr1",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr1 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= expr OR expr1 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo(Nodo.OPERACION.OR,l.getNodo("nodo"),x.getNodo("nodo"));
                        l.set("nodo",nodo);
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipo ::= error 
            {
              Attr RESULT =null;
		RESULT = new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipo ::= KW_INT 
            {
              Attr RESULT =null;
		RESULT = new Attr("tipo","int");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipo ::= KW_STRING 
            {
              Attr RESULT =null;
		RESULT = new Attr("tipo","string");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipo ::= KW_BOOLEAN 
            {
              Attr RESULT =null;
		RESULT = new Attr("tipo","boolean");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo ::= KW_QUEUE 
            {
              Attr RESULT =null;
		RESULT = new Attr("tipo","queue");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo ::= KW_LIST 
            {
              Attr RESULT =null;
		RESULT = new Attr("tipo","list");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // id_list ::= id 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Attr a = new Attr("list",new ArrayList<Attr>());
                        a.getList("list").add(x);
                        RESULT = a;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // id_list ::= id_list COMA id 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int x1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x1 = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        x.getList("list").add(x1);
                        RESULT = x;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // enviar ::= SEND LP expr RP PCOMA 
            {
              Attr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr e = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    Nodo nodo = new Nodo(Nodo.OPERACION.ENVIAR,e.getNodo("nodo"),null);
                    RESULT = new Attr("nodo",nodo);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enviar",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // esperar ::= WAIT LP expr RP PCOMA 
            {
              Attr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr e = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    Nodo nodo = new Nodo(Nodo.OPERACION.ESPERAR,e.getNodo("nodo"),null);
                    RESULT = new Attr("nodo",nodo);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("esperar",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // asignacion ::= expr_list LP params RP EQUAL id_list PCOMA 
            {
              Attr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Attr e = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Attr p = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    Integer count = e.getInteger("count");
                    if(count == 1){
                        //id
                        //funcion
                        //params
                        
                        e.set("params",p.getList("list"));
                        //e.set("list",l.get("list"));  

                        Nodo nodo = new Nodo(
                                            Nodo.OPERACION.ASIGNACION,
                                            new Nodo(new Attr("val",l.get("list")),false),
                                            new Nodo(e,false)
                                            );

                        RESULT = new Attr("nodo",nodo);
                    }   
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // asignacion ::= expr EQUAL id_list PCOMA 
            {
              Attr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Attr e = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    
                    Nodo nodo = new Nodo(
                                        Nodo.OPERACION.ASIGNACION,
                                        new Nodo(new Attr("val",l.get("list")),false),
                                        e.getNodo("nodo")
                                        );
                    RESULT = new Attr("nodo",nodo);

                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracion ::= id_list IS tipo PCOMA 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr t = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    Nodo nodo = new Nodo(
                                    Nodo.OPERACION.DECLARACION,
                                    new Nodo(new Attr("val",t.get("tipo")),false),
                                    new Nodo(new Attr("val",l.get("list")),false)
                                    );
                    RESULT = new Attr("nodo",nodo);

                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // println ::= PRINTLN expr PCOMA 
            {
              Attr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr e = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    Nodo nodo = new Nodo(Nodo.OPERACION.PRINTLN,e.getNodo("nodo"),null);
                    RESULT = new Attr("nodo",nodo);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("println",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= println 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= control 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= enviar 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= esperar 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= asignacion 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= declaracion 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt_list ::= stmt 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt_list ::= stmt_list stmt 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    Nodo nodo = new Nodo (Nodo.OPERACION.STMT,l.getNodo("nodo"),x.getNodo("nodo"));
                    RESULT = new Attr("nodo",nodo);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // input ::= stmt_list 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("input",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // begin ::= 
            {
              Attr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("begin",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= begin EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr start_val = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // begin ::= input 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    addNodo(x.getNodo("nodo"));
                    System.out.println("Compiled...");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("begin",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

