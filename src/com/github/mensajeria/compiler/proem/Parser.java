
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Dec 22 05:45:33 CST 2013
//----------------------------------------------------

package com.github.mensajeria.compiler.proem;

import com.github.mensajeria.compiler.Sim;
import com.github.mensajeria.compiler.Attr;
import com.github.mensajeria.compiler.Err;
import com.github.mensajeria.compiler.Nodo;
import java.io.File;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.HashSet;
import java.lang.Thread.State;
import java.awt.Dimension;
import java.awt.Point;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Dec 22 05:45:33 CST 2013
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\003\000\002\002\004\000\002\002" +
    "\002\000\002\003\003\000\002\004\004\000\002\004\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\037\005\000\002\006\006\000\002\007\006\000\002\007" +
    "\006\000\002\007\004\000\002\040\006\000\002\027\003" +
    "\000\002\027\002\000\002\035\005\000\002\035\003\000" +
    "\002\030\005\000\002\030\003\000\002\012\007\000\002" +
    "\013\007\000\002\011\005\000\002\011\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\015\005\000" +
    "\002\015\003\000\002\016\005\000\002\016\003\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\003" +
    "\000\002\020\005\000\002\020\005\000\002\020\003\000" +
    "\002\021\005\000\002\021\005\000\002\021\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\005\000\002\026\003\000\002\024\003" +
    "\000\002\025\003\000\002\023\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\031\011\000\002" +
    "\032\013\000\002\033\012\000\002\034\006\000\002\034" +
    "\002\000\002\036\003\000\002\036\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\032\002\uffff\011\005\012\035\013\021\014" +
    "\017\031\013\040\033\041\020\042\007\044\015\046\041" +
    "\053\006\001\002\000\004\002\001\001\002\000\046\015" +
    "\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\023\uffc7\024\uffc7" +
    "\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033" +
    "\uffc7\034\uffc7\035\uffc7\036\uffc7\050\uffc7\001\002\000\014" +
    "\011\005\012\035\013\021\014\017\031\013\001\002\000" +
    "\004\031\174\001\002\000\046\015\uffcc\016\uffcc\017\uffcc" +
    "\020\uffcc\021\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027" +
    "\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc" +
    "\036\uffcc\050\uffcc\001\002\000\004\002\173\001\002\000" +
    "\006\016\122\047\162\001\002\000\014\011\005\012\035" +
    "\013\021\014\017\031\013\001\002\000\034\002\ufff9\011" +
    "\ufff9\012\ufff9\013\ufff9\014\ufff9\031\ufff9\040\ufff9\041\ufff9" +
    "\042\ufff9\044\ufff9\046\ufff9\052\ufff9\053\ufff9\001\002\000" +
    "\004\031\145\001\002\000\034\002\ufff8\011\ufff8\012\ufff8" +
    "\013\ufff8\014\ufff8\031\ufff8\040\ufff8\041\ufff8\042\ufff8\044" +
    "\ufff8\046\ufff8\052\ufff8\053\ufff8\001\002\000\052\015\uffc6" +
    "\016\uffc6\017\uffc6\020\uffc6\021\uffc6\023\uffc6\024\uffc6\025" +
    "\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6" +
    "\034\uffc6\035\uffc6\036\uffc6\043\uffc6\047\uffc6\050\uffc6\001" +
    "\002\000\004\031\141\001\002\000\046\015\uffc9\016\uffc9" +
    "\017\uffc9\020\uffc9\021\uffc9\023\uffc9\024\uffc9\025\uffc9\026" +
    "\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9" +
    "\035\uffc9\036\uffc9\050\uffc9\001\002\000\034\002\ufff7\011" +
    "\ufff7\012\ufff7\013\ufff7\014\ufff7\031\ufff7\040\ufff7\041\ufff7" +
    "\042\ufff7\044\ufff7\046\ufff7\052\ufff7\053\ufff7\001\002\000" +
    "\006\015\135\017\136\001\002\000\034\002\ufffe\011\005" +
    "\012\035\013\021\014\017\031\013\040\033\041\020\042" +
    "\007\044\015\046\041\052\ufffe\053\006\001\002\000\034" +
    "\002\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\031\uffc5\040" +
    "\uffc5\041\uffc5\042\uffc5\044\uffc5\046\uffc5\052\uffc5\053\uffc5" +
    "\001\002\000\034\002\uffc3\011\uffc3\012\uffc3\013\uffc3\014" +
    "\uffc3\031\uffc3\040\uffc3\041\uffc3\042\uffc3\044\uffc3\046\uffc3" +
    "\052\uffc3\053\uffc3\001\002\000\044\015\uffce\016\uffe6\020" +
    "\uffce\021\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce" +
    "\030\uffce\031\uffce\033\uffce\034\uffce\035\uffce\036\uffce\047" +
    "\uffe6\050\uffce\001\002\000\034\002\ufff6\011\ufff6\012\ufff6" +
    "\013\ufff6\014\ufff6\031\ufff6\040\ufff6\041\ufff6\042\ufff6\044" +
    "\ufff6\046\ufff6\052\ufff6\053\ufff6\001\002\000\046\015\uffcb" +
    "\016\uffcb\017\uffcb\020\uffcb\021\uffcb\023\uffcb\024\uffcb\025" +
    "\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb" +
    "\034\uffcb\035\uffcb\036\uffcb\050\uffcb\001\002\000\034\002" +
    "\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\031\uffc4\040\uffc4" +
    "\041\uffc4\042\uffc4\044\uffc4\046\uffc4\052\uffc4\053\uffc4\001" +
    "\002\000\004\031\125\001\002\000\012\015\117\020\057" +
    "\031\uffea\050\uffea\001\002\000\046\015\uffc8\016\uffc8\017" +
    "\uffc8\020\uffc8\021\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8" +
    "\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035" +
    "\uffc8\036\uffc8\050\uffc8\001\002\000\046\015\uffcf\016\uffcf" +
    "\017\uffcf\020\uffcf\021\uffcf\023\uffcf\024\uffcf\025\uffcf\026" +
    "\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf" +
    "\035\uffcf\036\uffcf\050\uffcf\001\002\000\046\015\uffd2\016" +
    "\uffd2\017\uffd2\020\uffd2\021\uffd2\023\uffd2\024\uffd2\025\uffd2" +
    "\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034" +
    "\uffd2\035\076\036\075\050\uffd2\001\002\000\042\015\uffd5" +
    "\016\uffd5\017\uffd5\020\uffd5\021\uffd5\023\uffd5\024\uffd5\025" +
    "\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\073" +
    "\034\072\050\uffd5\001\002\000\004\031\113\001\002\000" +
    "\036\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\023\065" +
    "\024\070\025\067\026\063\027\064\030\066\031\uffdc\032" +
    "\uffdc\050\uffdc\001\002\000\034\002\ufffb\011\ufffb\012\ufffb" +
    "\013\ufffb\014\ufffb\031\ufffb\040\ufffb\041\ufffb\042\ufffb\044" +
    "\ufffb\046\ufffb\052\ufffb\053\ufffb\001\002\000\022\015\uffde" +
    "\016\uffde\017\uffde\020\uffde\021\061\031\uffde\032\uffde\050" +
    "\uffde\001\002\000\034\002\ufffa\011\ufffa\012\ufffa\013\ufffa" +
    "\014\ufffa\031\ufffa\040\ufffa\041\ufffa\042\ufffa\044\ufffa\046" +
    "\ufffa\052\ufffa\053\ufffa\001\002\000\006\031\052\050\051" +
    "\001\002\000\034\002\ufffc\011\ufffc\012\ufffc\013\ufffc\014" +
    "\ufffc\031\ufffc\040\ufffc\041\ufffc\042\ufffc\044\ufffc\046\ufffc" +
    "\052\ufffc\053\ufffc\001\002\000\046\015\uffcd\016\uffcd\017" +
    "\uffcd\020\uffcd\021\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd" +
    "\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035" +
    "\uffcd\036\uffcd\050\uffcd\001\002\000\014\011\005\012\035" +
    "\013\021\014\017\031\013\001\002\000\016\011\005\012" +
    "\035\013\021\014\017\031\013\032\uffee\001\002\000\046" +
    "\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce\023\uffce\024" +
    "\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce" +
    "\033\uffce\034\uffce\035\uffce\036\uffce\050\uffce\001\002\000" +
    "\004\032\111\001\002\000\006\016\107\032\uffef\001\002" +
    "\000\010\016\uffec\020\057\032\uffec\001\002\000\014\011" +
    "\005\012\035\013\021\014\017\031\013\001\002\000\022" +
    "\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\061\031\uffdf\032" +
    "\uffdf\050\uffdf\001\002\000\014\011\005\012\035\013\021" +
    "\014\017\031\013\001\002\000\036\015\uffdd\016\uffdd\017" +
    "\uffdd\020\uffdd\021\uffdd\023\065\024\070\025\067\026\063" +
    "\027\064\030\066\031\uffdd\032\uffdd\050\uffdd\001\002\000" +
    "\014\011\005\012\035\013\021\014\017\031\013\001\002" +
    "\000\014\011\005\012\035\013\021\014\017\031\013\001" +
    "\002\000\014\011\005\012\035\013\021\014\017\031\013" +
    "\001\002\000\014\011\005\012\035\013\021\014\017\031" +
    "\013\001\002\000\014\011\005\012\035\013\021\014\017" +
    "\031\013\001\002\000\014\011\005\012\035\013\021\014" +
    "\017\031\013\001\002\000\042\015\uffd6\016\uffd6\017\uffd6" +
    "\020\uffd6\021\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027" +
    "\uffd6\030\uffd6\031\uffd6\032\uffd6\033\073\034\072\050\uffd6" +
    "\001\002\000\014\011\005\012\035\013\021\014\017\031" +
    "\013\001\002\000\014\011\005\012\035\013\021\014\017" +
    "\031\013\001\002\000\046\015\uffd3\016\uffd3\017\uffd3\020" +
    "\uffd3\021\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3" +
    "\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\076\036" +
    "\075\050\uffd3\001\002\000\014\011\005\012\035\013\021" +
    "\014\017\031\013\001\002\000\014\011\005\012\035\013" +
    "\021\014\017\031\013\001\002\000\046\015\uffd1\016\uffd1" +
    "\017\uffd1\020\uffd1\021\uffd1\023\uffd1\024\uffd1\025\uffd1\026" +
    "\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1" +
    "\035\uffd1\036\uffd1\050\uffd1\001\002\000\046\015\uffd0\016" +
    "\uffd0\017\uffd0\020\uffd0\021\uffd0\023\uffd0\024\uffd0\025\uffd0" +
    "\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034" +
    "\uffd0\035\uffd0\036\uffd0\050\uffd0\001\002\000\046\015\uffd4" +
    "\016\uffd4\017\uffd4\020\uffd4\021\uffd4\023\uffd4\024\uffd4\025" +
    "\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4" +
    "\034\uffd4\035\076\036\075\050\uffd4\001\002\000\042\015" +
    "\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\023\uffd8\024\uffd8" +
    "\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033" +
    "\073\034\072\050\uffd8\001\002\000\042\015\uffdb\016\uffdb" +
    "\017\uffdb\020\uffdb\021\uffdb\023\uffdb\024\uffdb\025\uffdb\026" +
    "\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\073\034\072" +
    "\050\uffdb\001\002\000\042\015\uffd7\016\uffd7\017\uffd7\020" +
    "\uffd7\021\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7" +
    "\030\uffd7\031\uffd7\032\uffd7\033\073\034\072\050\uffd7\001" +
    "\002\000\042\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda" +
    "\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031" +
    "\uffda\032\uffda\033\073\034\072\050\uffda\001\002\000\042" +
    "\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\023\uffd9\024" +
    "\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9" +
    "\033\073\034\072\050\uffd9\001\002\000\014\011\005\012" +
    "\035\013\021\014\017\031\013\001\002\000\010\016\uffed" +
    "\020\057\032\uffed\001\002\000\006\015\ufff0\017\ufff0\001" +
    "\002\000\010\020\057\031\uffeb\050\uffeb\001\002\000\014" +
    "\011\005\012\035\013\021\014\017\031\013\001\002\000" +
    "\006\020\057\032\115\001\002\000\004\017\116\001\002" +
    "\000\034\002\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\031" +
    "\uffe8\040\uffe8\041\uffe8\042\uffe8\044\uffe8\046\uffe8\052\uffe8" +
    "\053\uffe8\001\002\000\004\014\017\001\002\000\006\016" +
    "\122\017\123\001\002\000\006\016\uffe6\017\uffe6\001\002" +
    "\000\004\014\017\001\002\000\034\002\ufff3\011\ufff3\012" +
    "\ufff3\013\ufff3\014\ufff3\031\ufff3\040\ufff3\041\ufff3\042\ufff3" +
    "\044\ufff3\046\ufff3\052\ufff3\053\ufff3\001\002\000\010\016" +
    "\uffe7\017\uffe7\047\uffe7\001\002\000\014\011\005\012\035" +
    "\013\021\014\017\031\013\001\002\000\006\020\057\032" +
    "\127\001\002\000\004\051\130\001\002\000\032\011\005" +
    "\012\035\013\021\014\017\031\013\040\033\041\020\042" +
    "\007\044\015\046\041\052\uffbc\053\006\001\002\000\004" +
    "\052\uffbd\001\002\000\004\052\133\001\002\000\034\002" +
    "\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\031\uffc2\040\uffc2" +
    "\041\uffc2\042\uffc2\044\uffc2\046\uffc2\052\uffc2\053\uffc2\001" +
    "\002\000\034\002\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd" +
    "\031\ufffd\040\ufffd\041\ufffd\042\ufffd\044\ufffd\046\ufffd\052" +
    "\ufffd\053\ufffd\001\002\000\004\014\017\001\002\000\034" +
    "\002\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\031\ufff1\040" +
    "\ufff1\041\ufff1\042\ufff1\044\ufff1\046\ufff1\052\ufff1\053\ufff1" +
    "\001\002\000\006\016\122\017\140\001\002\000\034\002" +
    "\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\031\ufff2\040\ufff2" +
    "\041\ufff2\042\ufff2\044\ufff2\046\ufff2\052\ufff2\053\ufff2\001" +
    "\002\000\014\011\005\012\035\013\021\014\017\031\013" +
    "\001\002\000\006\020\057\032\143\001\002\000\004\017" +
    "\144\001\002\000\034\002\uffe9\011\uffe9\012\uffe9\013\uffe9" +
    "\014\uffe9\031\uffe9\040\uffe9\041\uffe9\042\uffe9\044\uffe9\046" +
    "\uffe9\052\uffe9\053\uffe9\001\002\000\014\011\005\012\035" +
    "\013\021\014\017\031\013\001\002\000\006\020\057\032" +
    "\147\001\002\000\004\051\150\001\002\000\032\011\005" +
    "\012\035\013\021\014\017\031\013\040\033\041\020\042" +
    "\007\044\015\046\041\052\uffbc\053\006\001\002\000\004" +
    "\052\152\001\002\000\036\002\uffbe\011\uffbe\012\uffbe\013" +
    "\uffbe\014\uffbe\031\uffbe\040\uffbe\041\uffbe\042\uffbe\044\uffbe" +
    "\045\153\046\uffbe\052\uffbe\053\uffbe\001\002\000\004\051" +
    "\155\001\002\000\034\002\uffc0\011\uffc0\012\uffc0\013\uffc0" +
    "\014\uffc0\031\uffc0\040\uffc0\041\uffc0\042\uffc0\044\uffc0\046" +
    "\uffc0\052\uffc0\053\uffc0\001\002\000\032\011\005\012\035" +
    "\013\021\014\017\031\013\040\033\041\020\042\007\044" +
    "\015\046\041\052\uffbc\053\006\001\002\000\004\052\157" +
    "\001\002\000\034\002\uffbf\011\uffbf\012\uffbf\013\uffbf\014" +
    "\uffbf\031\uffbf\040\uffbf\041\uffbf\042\uffbf\044\uffbf\046\uffbf" +
    "\052\uffbf\053\uffbf\001\002\000\006\020\057\032\161\001" +
    "\002\000\046\015\uffca\016\uffca\017\uffca\020\uffca\021\uffca" +
    "\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031" +
    "\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\050\uffca" +
    "\001\002\000\016\003\163\004\171\005\170\006\167\007" +
    "\164\010\166\001\002\000\004\017\uffe0\001\002\000\004" +
    "\017\uffe4\001\002\000\004\017\172\001\002\000\004\017" +
    "\uffe5\001\002\000\004\017\uffe3\001\002\000\004\017\uffe2" +
    "\001\002\000\004\017\uffe1\001\002\000\034\002\ufff4\011" +
    "\ufff4\012\ufff4\013\ufff4\014\ufff4\031\ufff4\040\ufff4\041\ufff4" +
    "\042\ufff4\044\ufff4\046\ufff4\052\ufff4\053\ufff4\001\002\000" +
    "\004\002\000\001\002\000\004\014\017\001\002\000\004" +
    "\043\176\001\002\000\014\011\005\012\035\013\021\014" +
    "\017\031\013\001\002\000\006\020\057\032\200\001\002" +
    "\000\004\051\201\001\002\000\032\011\005\012\035\013" +
    "\021\014\017\031\013\040\033\041\020\042\007\044\015" +
    "\046\041\052\uffbc\053\006\001\002\000\004\052\203\001" +
    "\002\000\034\002\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1" +
    "\031\uffc1\040\uffc1\041\uffc1\042\uffc1\044\uffc1\046\uffc1\052" +
    "\uffc1\053\uffc1\001\002\000\006\017\205\020\057\001\002" +
    "\000\034\002\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\031" +
    "\ufff5\040\ufff5\041\ufff5\042\ufff5\044\ufff5\046\ufff5\052\ufff5" +
    "\053\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\066\002\010\003\003\004\023\005\046\006" +
    "\042\007\044\010\021\011\011\012\013\013\015\015\033" +
    "\016\043\017\041\020\037\021\036\022\035\023\026\024" +
    "\007\025\030\026\047\030\045\031\024\032\031\033\025" +
    "\037\027\040\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\015\203\016\043\017\041\020\037\021\036" +
    "\022\035\023\052\024\007\025\030\026\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\015\157\016\043\017\041\020\037\021" +
    "\036\022\035\023\052\024\007\025\030\026\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\060\005\133\006\042\007" +
    "\044\010\021\011\011\012\013\013\015\015\033\016\043" +
    "\017\041\020\037\021\036\022\035\023\026\024\007\025" +
    "\030\026\047\030\045\031\024\032\031\033\025\037\027" +
    "\040\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\015\111\016\043\017" +
    "\041\020\037\021\036\022\035\023\052\024\007\025\030" +
    "\026\047\001\001\000\032\015\055\016\043\017\041\020" +
    "\037\021\036\022\035\023\052\024\007\025\030\026\047" +
    "\027\053\035\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\016\057" +
    "\017\041\020\037\021\036\022\035\023\052\024\007\025" +
    "\030\026\047\001\001\000\002\001\001\000\022\017\061" +
    "\020\037\021\036\022\035\023\052\024\007\025\030\026" +
    "\047\001\001\000\002\001\001\000\020\020\105\021\036" +
    "\022\035\023\052\024\007\025\030\026\047\001\001\000" +
    "\020\020\104\021\036\022\035\023\052\024\007\025\030" +
    "\026\047\001\001\000\020\020\103\021\036\022\035\023" +
    "\052\024\007\025\030\026\047\001\001\000\020\020\102" +
    "\021\036\022\035\023\052\024\007\025\030\026\047\001" +
    "\001\000\020\020\101\021\036\022\035\023\052\024\007" +
    "\025\030\026\047\001\001\000\020\020\070\021\036\022" +
    "\035\023\052\024\007\025\030\026\047\001\001\000\002" +
    "\001\001\000\016\021\100\022\035\023\052\024\007\025" +
    "\030\026\047\001\001\000\016\021\073\022\035\023\052" +
    "\024\007\025\030\026\047\001\001\000\002\001\001\000" +
    "\014\022\077\023\052\024\007\025\030\026\047\001\001" +
    "\000\014\022\076\023\052\024\007\025\030\026\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\015\107\016\043" +
    "\017\041\020\037\021\036\022\035\023\052\024\007\025" +
    "\030\026\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\015\113\016\043\017\041\020" +
    "\037\021\036\022\035\023\052\024\007\025\030\026\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\117\023\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\015\125\016\043\017\041" +
    "\020\037\021\036\022\035\023\052\024\007\025\030\026" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\066" +
    "\003\130\004\023\005\046\006\042\007\044\010\021\011" +
    "\011\012\013\013\015\015\033\016\043\017\041\020\037" +
    "\021\036\022\035\023\026\024\007\025\030\026\047\030" +
    "\045\031\024\032\031\033\025\036\131\037\027\040\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\136\023\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\015\141\016\043\017\041\020\037\021\036\022\035" +
    "\023\052\024\007\025\030\026\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\015\145" +
    "\016\043\017\041\020\037\021\036\022\035\023\052\024" +
    "\007\025\030\026\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\066\003\130\004\023\005\046\006\042\007" +
    "\044\010\021\011\011\012\013\013\015\015\033\016\043" +
    "\017\041\020\037\021\036\022\035\023\026\024\007\025" +
    "\030\026\047\030\045\031\024\032\031\033\025\036\150" +
    "\037\027\040\022\001\001\000\002\001\001\000\004\034" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\066" +
    "\003\130\004\023\005\046\006\042\007\044\010\021\011" +
    "\011\012\013\013\015\015\033\016\043\017\041\020\037" +
    "\021\036\022\035\023\026\024\007\025\030\026\047\030" +
    "\045\031\024\032\031\033\025\036\155\037\027\040\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\164\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\174\001" +
    "\001\000\002\001\001\000\026\015\176\016\043\017\041" +
    "\020\037\021\036\022\035\023\052\024\007\025\030\026" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\066" +
    "\003\130\004\023\005\046\006\042\007\044\010\021\011" +
    "\011\012\013\013\015\015\033\016\043\017\041\020\037" +
    "\021\036\022\035\023\026\024\007\025\030\026\047\030" +
    "\045\031\024\032\031\033\025\036\201\037\027\040\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
    public LinkedList<Err> errors = new LinkedList<>();
    public LinkedList<Nodo> nodos = new LinkedList<>();

    public void report_error(String message, Object info){
        Err e = new Err(message,info,Err.TIPO.SINTACTICO);

        if(info instanceof java_cup.runtime.Symbol){
            e.setSym((java_cup.runtime.Symbol)info);
        }
        errors.add(e);
    }
    public void report_fatal_error(String message,Object info){
        report_error(message,info);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {



    void report_error(String msg,Object info){
        parser.report_error(msg,info);
    }

    LinkedList<Err> getErrs(){
        return parser.errors;
    }
    void addNodo(Nodo nodo){
        parser.nodos.add(nodo);
    }

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // control_body ::= 
            {
              Attr RESULT =null;
		RESULT = new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("control_body",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // control_body ::= input 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("control_body",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // elseif ::= 
            {
              Attr RESULT =null;
		RESULT = new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseif",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // elseif ::= ELSE LL1 control_body LL2 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseif",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // if ::= IF LP expr RP LL1 control_body LL2 elseif 
            {
              Attr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Attr e = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int x1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x1 = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Attr val = new Attr();

                        val.set("if",x.getNodo("nodo"));
                        val.set("else",x1.getNodo("nodo"));

                        Nodo nodo = new Nodo(
                                            Nodo.OPERACION.IF,
                                            new Nodo(new Attr("val",e.getNodo("nodo")),false),
                                            new Nodo(new Attr("val",val),false)
                                            );

                        RESULT = new Attr("nodo",nodo);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // for ::= FOR LP id TO expr RP LL1 control_body LL2 
            {
              Attr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Attr id = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Attr e = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		

                        Attr val = new Attr();
                        val.set("id",id);
                        val.set("expr",e.getNodo("nodo"));
                        Nodo nodo = new Nodo(
                                            Nodo.OPERACION.FOR,
                                            new Nodo(new Attr("val",val),false),
                                            new Nodo(new Attr("val",x),false)
                                            );
                        RESULT = new Attr("nodo",nodo);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // while ::= WHILE LP expr RP LL1 control_body LL2 
            {
              Attr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Attr e = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        Nodo nodo = new Nodo(
                                            Nodo.OPERACION.WHILE,
                                            new Nodo(new Attr("val",e),false),
                                            new Nodo(new Attr("val",x),false)
                                            );
                        RESULT = new Attr("nodo",nodo); 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // control ::= if 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("control",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // control ::= for 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("control",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // control ::= while 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("control",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // id ::= ID 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    String key = x;
                                    String tipo = null;
                                    boolean exists = false;


                                    Attr a = new Attr();
                                    a.set("val",key);
                                    a.set("tipo",tipo);
                                    a.set("id",true);
                                    a.set("exists",exists);
                                    a.set("info",CUP$Parser$stack.peek());
                                    a.set("nodo",new Nodo(a,true));
                                    RESULT = a;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // int ::= INT 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    Attr a = new Attr();
                                    a.set("val",x);
                                    a.set("tipo","int");
                                    a.set("info",CUP$Parser$stack.peek());
                                    a.set("nodo",new Nodo(a,false));
                                    RESULT = a;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("int",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // string ::= STRING 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    Attr a = new Attr();
                                    a.set("val",x);
                                    a.set("tipo","string");
                                    a.set("info",CUP$Parser$stack.peek());
                                    a.set("nodo",new Nodo(a,false));
                                    RESULT = a;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // boolean ::= BOOLEAN 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    Attr a = new Attr();

                                    a.set("val",x);
                                    a.set("tipo","boolean");
                                    a.set("info",CUP$Parser$stack.peek());
                                    a.set("nodo",new Nodo(a,false));
                                    RESULT = a;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("boolean",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr5 ::= LP expr RP 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr5",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr5 ::= int 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr5",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr5 ::= string 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr5",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr5 ::= boolean 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr5",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr5 ::= id 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr5",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr4 ::= expr5 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr4",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr4 ::= expr4 DIV expr5 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo(Nodo.OPERACION.DIVISION,l.getNodo("nodo"),x.getNodo("nodo"));
                        l.set("nodo",nodo);
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr4",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr4 ::= expr4 MULTI expr5 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo(Nodo.OPERACION.MULTIPLICACION,l.getNodo("nodo"),x.getNodo("nodo"));
                        l.set("nodo",nodo);
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr4",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr3 ::= expr4 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr3",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr3 ::= expr3 MINUS expr4 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo(Nodo.OPERACION.RESTA,l.getNodo("nodo"),x.getNodo("nodo"));
                        l.set("nodo",nodo);
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr3",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr3 ::= expr3 PLUS expr4 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo(Nodo.OPERACION.SUMA,l.getNodo("nodo"),x.getNodo("nodo"));
                        l.set("nodo",nodo);
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr3",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr2 ::= expr3 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr2",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr2 ::= expr2 NEQUAL expr3 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo(Nodo.OPERACION.NEQUAL,l.getNodo("nodo"),x.getNodo("nodo"));
                        l.set("nodo",nodo);
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr2",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr2 ::= expr2 DEQUAL expr3 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo(Nodo.OPERACION.DEQUAL,l.getNodo("nodo"),x.getNodo("nodo"));
                        l.set("nodo",nodo);
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr2",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr2 ::= expr2 BTHAN expr3 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo(Nodo.OPERACION.BTHAN,l.getNodo("nodo"),x.getNodo("nodo"));
                        l.set("nodo",nodo);
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr2",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr2 ::= expr2 LTHAN expr3 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo(Nodo.OPERACION.LTHAN,l.getNodo("nodo"),x.getNodo("nodo"));
                        l.set("nodo",nodo);
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr2",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr2 ::= expr2 BETHAN expr3 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo(Nodo.OPERACION.BETHAN,l.getNodo("nodo"),x.getNodo("nodo"));
                        l.set("nodo",nodo);
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr2",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr2 ::= expr2 LETHAN expr3 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo(Nodo.OPERACION.LETHAN,l.getNodo("nodo"),x.getNodo("nodo"));
                        l.set("nodo",nodo);
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr2",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr1 ::= expr2 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr1",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr1 ::= expr1 AND expr2 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo(Nodo.OPERACION.AND,l.getNodo("nodo"),x.getNodo("nodo"));
                        l.set("nodo",nodo);
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr1",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= expr1 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= expr OR expr1 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Nodo nodo = new Nodo(Nodo.OPERACION.OR,l.getNodo("nodo"),x.getNodo("nodo"));
                        l.set("nodo",nodo);
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipo ::= error 
            {
              Attr RESULT =null;
		RESULT = new Attr();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipo ::= KW_INT 
            {
              Attr RESULT =null;
		RESULT = new Attr("tipo","int");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipo ::= KW_STRING 
            {
              Attr RESULT =null;
		RESULT = new Attr("tipo","string");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipo ::= KW_BOOLEAN 
            {
              Attr RESULT =null;
		RESULT = new Attr("tipo","boolean");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipo ::= KW_QUEUE 
            {
              Attr RESULT =null;
		RESULT = new Attr("tipo","queue");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipo ::= KW_LIST 
            {
              Attr RESULT =null;
		RESULT = new Attr("tipo","list");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // id_list ::= id 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Attr a = new Attr("list",new ArrayList<Attr>());
                        a.getList("list").add(x);
                        RESULT = a;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // id_list ::= id_list COMA id 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int x1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int x1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x1 = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        x.getList("list").add(x1);
                        RESULT = x;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // enviar ::= SEND LP expr RP PCOMA 
            {
              Attr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr e = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    Nodo nodo = new Nodo(Nodo.OPERACION.ENVIAR,e.getNodo("nodo"),null);
                    RESULT = new Attr("nodo",nodo);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enviar",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // esperar ::= WAIT LP expr RP PCOMA 
            {
              Attr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr e = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                    Nodo nodo = new Nodo(Nodo.OPERACION.ESPERAR,e.getNodo("nodo"),null);
                    RESULT = new Attr("nodo",nodo);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("esperar",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr_list ::= expr 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Boolean isId = x.getBoolean("id");
                        Attr a = new Attr();
                        if(x != null && isId ){
                            a.set("id",x);
                        } else {
                            report_error("Se esperaba un identificador",a.get("info"));
                        }
                        a.set("count",1);
                        RESULT = a;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr_list ::= expr_list PUNTO expr 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Boolean isId = x.getBoolean("id");
                        Integer count = l.getInteger("count") + 1;
                        l.set("count",count);
                        if(x != null && isId ){

                            switch(count){
                                case 2:
                                    l.set("funcion",x);
                                break;
                                default:
                                    report_error("No existe funcion asociada.",x.get("info"));
                            }


                        } else {
                            report_error("Se esperaba una funcion...",x.get("info"));
                        }
    
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr_list_p ::= expr 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        Attr a = new Attr();
                        ArrayList<Attr> l = new ArrayList<>();
                        l.add(x);
                        a.set("list",l);
                        a.set("count",1);
                        RESULT = a;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list_p",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr_list_p ::= expr_list_p COMA expr 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        l.getList("list").add(x);
                        l.set("count",l.getInteger("count")+1);
                        RESULT = l;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list_p",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // params ::= 
            {
              Attr RESULT =null;
		
                        Attr a =  new Attr();
                        a.set("list",new ArrayList<Attr>());
                        a.set("count",0);   
                        RESULT = a;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // params ::= expr_list_p 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("params",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // funcion ::= expr_list LP params RP 
            {
              Attr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Attr e = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr p = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    Integer e_count = e.getInteger("count");
                    Integer p_count = e.getInteger("count");
                    Nodo nodo = null;

                    if(e_count == 2){
                        e.set("params",p.getList("list"));
                        Nodo left = new Nodo(new Attr("val",e),false);
                        nodo = new Nodo(Nodo.OPERACION.FUNCION,left,null);
                    } else {
                        report_error("Cola/Arreglo no reconocido...",e.getAttr("id").get("info"));
                    }

                    RESULT = new Attr("nodo",nodo);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcion",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // asignacion ::= funcion PCOMA 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // asignacion ::= funcion EQUAL id_list PCOMA 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    Nodo nodo = new Nodo(
                                        Nodo.OPERACION.ASIGNACION,
                                        new Nodo(new Attr("val",l.get("list")),false),
                                        x.getNodo("nodo")
                                        );
                    RESULT = new Attr("nodo",nodo);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // asignacion ::= expr EQUAL id_list PCOMA 
            {
              Attr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Attr e = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    
                    Nodo nodo = new Nodo(
                                        Nodo.OPERACION.ASIGNACION,
                                        new Nodo(new Attr("val",l.get("list")),false),
                                        e.getNodo("nodo")
                                        );
                    RESULT = new Attr("nodo",nodo);

                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracion ::= id_list IS tipo PCOMA 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr t = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    Nodo nodo = new Nodo(
                                    Nodo.OPERACION.DECLARACION,
                                    new Nodo(new Attr("val",t.get("tipo")),false),
                                    new Nodo(new Attr("val",l.get("list")),false)
                                    );
                    RESULT = new Attr("nodo",nodo);

                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // println ::= PRINTLN expr PCOMA 
            {
              Attr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr e = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    Nodo nodo = new Nodo(Nodo.OPERACION.PRINTLN,e.getNodo("nodo"),null);
                    RESULT = new Attr("nodo",nodo);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("println",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= println 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= control 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= enviar 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= esperar 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= asignacion 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= declaracion 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt_list ::= stmt 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt_list ::= stmt_list stmt 
            {
              Attr RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr l = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    Nodo nodo = new Nodo (Nodo.OPERACION.STMT,l.getNodo("nodo"),x.getNodo("nodo"));
                    RESULT = new Attr("nodo",nodo);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // input ::= stmt_list 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = x;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("input",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // begin ::= 
            {
              Attr RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("begin",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= begin EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Attr start_val = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // begin ::= input 
            {
              Attr RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Attr x = (Attr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    addNodo(x.getNodo("nodo"));
                    System.out.println("Compiled...");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("begin",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

