/* The following code was generated by JFlex 1.4.3 on 12/19/13 4:47 PM */


package com.github.mensajeria.compiler.servidor;

import com.github.mensajeria.compiler.Err;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java.lang.StringBuilder;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/19/13 4:47 PM from the specification file
 * <tt>./src/servidor/scanner_file.jflex</tt>
 */
public class Scanner_file implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYCONTENIDO = 6;
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\1\2\0\1\2\16\7\4\0\1\3\1\0\1\41"+
    "\1\0\1\6\3\0\1\35\1\36\3\0\1\5\1\0\1\17\12\4"+
    "\1\20\1\40\1\21\1\37\1\25\2\0\32\6\1\0\1\42\2\0"+
    "\1\6\1\0\1\15\1\6\1\22\1\33\1\13\1\14\1\6\1\34"+
    "\1\26\1\30\1\6\1\6\1\27\1\24\1\23\1\31\1\6\1\11"+
    "\1\16\1\10\1\12\1\6\1\32\3\6\4\0\41\7\2\0\4\6"+
    "\4\0\1\6\2\0\1\7\7\0\1\6\4\0\1\6\5\0\27\6"+
    "\1\0\37\6\1\0\u01ca\6\4\0\14\6\16\0\5\6\7\0\1\6"+
    "\1\0\1\6\21\0\160\7\5\6\1\0\2\6\2\0\4\6\10\0"+
    "\1\6\1\0\3\6\1\0\1\6\1\0\24\6\1\0\123\6\1\0"+
    "\213\6\1\0\5\7\2\0\236\6\11\0\46\6\2\0\1\6\7\0"+
    "\47\6\11\0\55\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0"+
    "\1\7\10\0\33\6\5\0\3\6\15\0\4\7\7\0\1\6\4\0"+
    "\13\7\5\0\53\6\37\7\4\0\2\6\1\7\143\6\1\0\1\6"+
    "\10\7\1\0\6\7\2\6\2\7\1\0\4\7\2\6\12\7\3\6"+
    "\2\0\1\6\17\0\1\7\1\6\1\7\36\6\33\7\2\0\131\6"+
    "\13\7\1\6\16\0\12\7\41\6\11\7\2\6\4\0\1\6\5\0"+
    "\26\6\4\7\1\6\11\7\1\6\3\7\1\6\5\7\22\0\31\6"+
    "\3\7\244\0\4\7\66\6\3\7\1\6\22\7\1\6\7\7\12\6"+
    "\2\7\2\0\12\7\1\0\7\6\1\0\7\6\1\0\3\7\1\0"+
    "\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\1\6\3\0"+
    "\4\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7\1\6"+
    "\10\0\1\7\4\0\2\6\1\0\3\6\2\7\2\0\12\7\4\6"+
    "\7\0\1\6\5\0\3\7\1\0\6\6\4\0\2\6\2\0\26\6"+
    "\1\0\7\6\1\0\2\6\1\0\2\6\1\0\2\6\2\0\1\7"+
    "\1\0\5\7\4\0\2\7\2\0\3\7\3\0\1\7\7\0\4\6"+
    "\1\0\1\6\7\0\14\7\3\6\1\7\13\0\3\7\1\0\11\6"+
    "\1\0\3\6\1\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6"+
    "\2\0\1\7\1\6\10\7\1\0\3\7\1\0\3\7\2\0\1\6"+
    "\17\0\2\6\2\7\2\0\12\7\1\0\1\6\17\0\3\7\1\0"+
    "\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0"+
    "\5\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7\10\0"+
    "\2\7\4\0\2\6\1\0\3\6\2\7\2\0\12\7\1\0\1\6"+
    "\20\0\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0"+
    "\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6\3\0"+
    "\14\6\4\0\5\7\3\0\3\7\1\0\4\7\2\0\1\6\6\0"+
    "\1\7\16\0\12\7\11\0\1\6\7\0\3\7\1\0\10\6\1\0"+
    "\3\6\1\0\27\6\1\0\12\6\1\0\5\6\3\0\1\6\7\7"+
    "\1\0\3\7\1\0\4\7\7\0\2\7\1\0\2\6\6\0\2\6"+
    "\2\7\2\0\12\7\22\0\2\7\1\0\10\6\1\0\3\6\1\0"+
    "\27\6\1\0\12\6\1\0\5\6\2\0\1\7\1\6\7\7\1\0"+
    "\3\7\1\0\4\7\7\0\2\7\7\0\1\6\1\0\2\6\2\7"+
    "\2\0\12\7\1\0\2\6\17\0\2\7\1\0\10\6\1\0\3\6"+
    "\1\0\51\6\2\0\1\6\7\7\1\0\3\7\1\0\4\7\1\6"+
    "\10\0\1\7\10\0\2\6\2\7\2\0\12\7\12\0\6\6\2\0"+
    "\2\7\1\0\22\6\3\0\30\6\1\0\11\6\1\0\1\6\2\0"+
    "\7\6\3\0\1\7\4\0\6\7\1\0\1\7\1\0\10\7\22\0"+
    "\2\7\15\0\60\6\1\7\2\6\7\7\4\0\10\6\10\7\1\0"+
    "\12\7\47\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0"+
    "\1\6\6\0\4\6\1\0\7\6\1\0\3\6\1\0\1\6\1\0"+
    "\1\6\2\0\2\6\1\0\4\6\1\7\2\6\6\7\1\0\2\7"+
    "\1\6\2\0\5\6\1\0\1\6\1\0\6\7\2\0\12\7\2\0"+
    "\2\6\42\0\1\6\27\0\2\7\6\0\12\7\13\0\1\7\1\0"+
    "\1\7\1\0\1\7\4\0\2\7\10\6\1\0\44\6\4\0\24\7"+
    "\1\0\2\7\5\6\13\7\1\0\44\7\11\0\1\7\71\0\53\6"+
    "\24\7\1\6\12\7\6\0\6\6\4\7\4\6\3\7\1\6\3\7"+
    "\2\6\7\7\3\6\4\7\15\6\14\7\1\6\17\7\2\0\46\6"+
    "\12\0\53\6\1\0\1\6\3\0\u0149\6\1\0\4\6\2\0\7\6"+
    "\1\0\1\6\1\0\4\6\2\0\51\6\1\0\4\6\2\0\41\6"+
    "\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\17\6"+
    "\1\0\71\6\1\0\4\6\2\0\103\6\2\0\3\7\40\0\20\6"+
    "\20\0\125\6\14\0\u026c\6\2\0\21\6\1\0\32\6\5\0\113\6"+
    "\3\0\3\6\17\0\15\6\1\0\4\6\3\7\13\0\22\6\3\7"+
    "\13\0\22\6\2\7\14\0\15\6\1\0\3\6\1\0\2\7\14\0"+
    "\64\6\40\7\3\0\1\6\3\0\2\6\1\7\2\0\12\7\41\0"+
    "\3\7\2\0\12\7\6\0\130\6\10\0\51\6\1\7\1\6\5\0"+
    "\106\6\12\0\35\6\3\0\14\7\4\0\14\7\12\0\12\7\36\6"+
    "\2\0\5\6\13\0\54\6\4\0\21\7\7\6\2\7\6\0\12\7"+
    "\46\0\27\6\5\7\4\0\65\6\12\7\1\0\35\7\2\0\13\7"+
    "\6\0\12\7\15\0\1\6\130\0\5\7\57\6\21\7\7\6\4\0"+
    "\12\7\21\0\11\7\14\0\3\7\36\6\12\7\3\0\2\6\12\7"+
    "\6\0\46\6\16\7\14\0\44\6\24\7\10\0\12\7\3\0\3\6"+
    "\12\7\44\6\122\0\3\7\1\0\25\7\4\6\1\7\4\6\1\7"+
    "\15\0\300\6\47\7\25\0\4\7\u0116\6\2\0\6\6\2\0\46\6"+
    "\2\0\6\6\2\0\10\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\37\6\2\0\65\6\1\0\7\6\1\0\1\6\3\0\3\6"+
    "\1\0\7\6\3\0\4\6\2\0\6\6\4\0\15\6\5\0\3\6"+
    "\1\0\7\6\16\0\5\7\32\0\5\7\20\0\2\6\23\0\1\6"+
    "\13\0\5\7\5\0\6\7\1\0\1\6\15\0\1\6\20\0\15\6"+
    "\3\0\32\6\26\0\15\7\4\0\1\7\3\0\14\7\21\0\1\6"+
    "\4\0\1\6\2\0\12\6\1\0\1\6\3\0\5\6\6\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\13\6\2\0\4\6"+
    "\5\0\5\6\4\0\1\6\21\0\51\6\u0a77\0\57\6\1\0\57\6"+
    "\1\0\205\6\6\0\4\6\3\7\16\0\46\6\12\0\66\6\11\0"+
    "\1\6\17\0\1\7\27\6\11\0\7\6\1\0\7\6\1\0\7\6"+
    "\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6"+
    "\1\0\40\7\57\0\1\6\u01d5\0\3\6\31\0\11\6\6\7\1\0"+
    "\5\6\2\0\5\6\4\0\126\6\2\0\2\7\2\0\3\6\1\0"+
    "\132\6\1\0\4\6\5\0\51\6\3\0\136\6\21\0\33\6\65\0"+
    "\20\6\u0200\0\u19b6\6\112\0\u51cc\6\64\0\u048d\6\103\0\56\6\2\0"+
    "\u010d\6\3\0\20\6\12\7\2\6\24\0\57\6\1\7\14\0\2\7"+
    "\1\0\31\6\10\0\120\6\2\7\45\0\11\6\2\0\147\6\2\0"+
    "\4\6\1\0\2\6\16\0\12\6\120\0\10\6\1\7\3\6\1\7"+
    "\4\6\1\7\27\6\5\7\20\0\1\6\7\0\64\6\14\0\2\7"+
    "\62\6\21\7\13\0\12\7\6\0\22\7\6\6\3\0\1\6\4\0"+
    "\12\7\34\6\10\7\2\0\27\6\15\7\14\0\35\6\3\0\4\7"+
    "\57\6\16\7\16\0\1\6\12\7\46\0\51\6\16\7\11\0\3\6"+
    "\1\7\10\6\2\7\2\0\12\7\6\0\27\6\3\0\1\6\1\7"+
    "\4\0\60\6\1\7\1\6\3\7\2\6\2\7\5\6\2\7\1\6"+
    "\1\7\1\6\30\0\3\6\43\0\6\6\2\0\6\6\2\0\6\6"+
    "\11\0\7\6\1\0\7\6\221\0\43\6\10\7\1\0\2\7\2\0"+
    "\12\7\6\0\u2ba4\6\14\0\27\6\4\0\61\6\u2104\0\u012e\6\2\0"+
    "\76\6\2\0\152\6\46\0\7\6\14\0\5\6\5\0\1\6\1\7"+
    "\12\6\1\0\15\6\1\0\5\6\1\0\1\6\1\0\2\6\1\0"+
    "\2\6\1\0\154\6\41\0\u016b\6\22\0\100\6\2\0\66\6\50\0"+
    "\15\6\3\0\20\7\20\0\7\7\14\0\2\6\30\0\3\6\31\0"+
    "\1\6\6\0\5\6\1\0\207\6\2\0\1\7\4\0\1\6\13\0"+
    "\12\7\7\0\32\6\4\0\1\6\1\0\32\6\13\0\131\6\3\0"+
    "\6\6\2\0\6\6\2\0\6\6\2\0\3\6\3\0\2\6\3\0"+
    "\2\6\22\0\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\1\1\4\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\2\3\7\0"+
    "\1\14\1\15\1\16\1\17\51\0\1\20\10\0\1\21"+
    "\1\22\6\0\1\23\2\0\1\24\2\0\1\25\2\0"+
    "\1\26\2\0\1\27\1\0\1\30\5\0\1\31";

  private static int [] zzUnpackAction() {
    int [] result = new int[109];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\43\0\106\0\151\0\151\0\214\0\257\0\322"+
    "\0\365\0\u0118\0\151\0\151\0\151\0\151\0\u013b\0\u013b"+
    "\0\u015e\0\u0181\0\322\0\u01a4\0\u01c7\0\u01ea\0\u020d\0\u0230"+
    "\0\u0253\0\u0276\0\151\0\151\0\151\0\151\0\u0299\0\u02bc"+
    "\0\u02df\0\u0302\0\u0325\0\u0348\0\u036b\0\u038e\0\u03b1\0\u03d4"+
    "\0\u03f7\0\u041a\0\u043d\0\u0460\0\u0483\0\u04a6\0\u04c9\0\u04ec"+
    "\0\u050f\0\u0532\0\u0555\0\u0578\0\u059b\0\u05be\0\u05e1\0\u0604"+
    "\0\u0627\0\u064a\0\u066d\0\u0690\0\u06b3\0\u06d6\0\u06f9\0\u071c"+
    "\0\u073f\0\u0762\0\u0785\0\u07a8\0\u07cb\0\u07ee\0\u0811\0\151"+
    "\0\u0834\0\u0857\0\u087a\0\u089d\0\u08c0\0\u08e3\0\u0906\0\u0929"+
    "\0\151\0\151\0\u094c\0\u096f\0\u0992\0\u09b5\0\u09d8\0\u09fb"+
    "\0\151\0\u0a1e\0\u0a41\0\151\0\u0a64\0\u0a87\0\151\0\u0aaa"+
    "\0\u0acd\0\151\0\u0af0\0\u0b13\0\151\0\u0b36\0\151\0\u0b59"+
    "\0\u0b7c\0\u0b9f\0\u0bc2\0\u0be5\0\151";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[109];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\5\1\7\1\10\1\11\1\4"+
    "\7\11\2\4\1\12\3\11\1\4\7\11\1\13\1\14"+
    "\1\15\1\16\45\4\1\17\2\4\33\17\1\20\2\17"+
    "\1\4\1\21\44\0\1\5\45\0\1\22\42\0\1\23"+
    "\42\0\1\11\1\0\11\11\3\0\3\11\1\0\7\11"+
    "\17\0\1\24\1\25\1\26\1\27\5\0\1\30\4\0"+
    "\1\31\1\0\1\32\11\0\1\17\2\0\36\17\12\0"+
    "\1\33\1\34\12\0\1\35\14\0\1\36\5\0\1\23"+
    "\12\0\1\37\36\0\1\40\45\0\1\41\53\0\1\42"+
    "\26\0\1\43\41\0\1\44\10\0\1\45\32\0\1\46"+
    "\44\0\1\47\31\0\1\50\60\0\1\51\32\0\1\52"+
    "\56\0\1\53\36\0\1\54\33\0\1\55\53\0\1\56"+
    "\42\0\1\57\34\0\1\60\30\0\1\61\51\0\1\62"+
    "\44\0\1\63\43\0\1\64\60\0\1\65\32\0\1\66"+
    "\26\0\1\67\50\0\1\70\42\0\1\71\43\0\1\72"+
    "\54\0\1\73\22\0\1\74\54\0\1\75\34\0\1\76"+
    "\35\0\1\77\45\0\1\100\1\0\1\101\42\0\1\102"+
    "\57\0\1\103\14\0\1\104\46\0\1\105\60\0\1\106"+
    "\25\0\1\107\56\0\1\110\32\0\1\111\51\0\1\112"+
    "\40\0\1\113\50\0\1\114\35\0\1\115\23\0\1\116"+
    "\61\0\1\117\42\0\1\120\44\0\1\121\42\0\1\122"+
    "\43\0\1\123\24\0\1\124\45\0\1\125\40\0\1\126"+
    "\35\0\1\127\47\0\1\130\56\0\1\131\50\0\1\132"+
    "\32\0\1\133\44\0\1\134\50\0\1\135\13\0\1\136"+
    "\63\0\1\137\40\0\1\140\35\0\1\141\51\0\1\142"+
    "\21\0\1\143\63\0\1\144\42\0\1\145\21\0\1\146"+
    "\73\0\1\147\25\0\1\150\26\0\1\151\42\0\1\152"+
    "\56\0\1\153\26\0\1\154\42\0\1\155\36\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3080];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\5\1\4\11\5\1\7\0\4\11\51\0"+
    "\1\11\10\0\2\11\6\0\1\11\2\0\1\11\2\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\0\1\11\5\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[109];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    /** Errores **/
    public LinkedList<Err> errores=new LinkedList<>();
    private void error(String message) {
            
        Symbol sym=new Symbol(Sym_file.error, yyline, yycolumn, yytext());
        Err e=new Err(message,sym,Err.TIPO.LEXICO);
        errores.add(e);
    }
    /** String **/
    StringBuilder string=new StringBuilder();

    /** Symbol **/
    private Symbol num_symbol(){
        int type=Sym_file.NERROR;
        
        try{
                Long num=new Long(yytext());
                if(num>=-16599999&&num<=16599999){
                        type=Sym_file.INT;
                } else if (num>=-165999990000L&&num<=165999990000L){
                        // type=Sym_file.LONG;
                }
        }catch (java.lang.NumberFormatException exc){
            error("N??mero demasiado grande.");
        }
        return new Symbol(type, yyline, yycolumn,yytext());
    }
    private Symbol symbol(int type) {
            return new Symbol(type, yyline, yycolumn,yytext());
    }
    private Symbol symbol(int type, Object value) {
            return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner_file(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Scanner_file(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2188) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 14: 
          { string.append('\n');
          }
        case 26: break;
        case 23: 
          { return symbol(Sym_file.CONTACTOS);
          }
        case 27: break;
        case 16: 
          { return symbol(Sym_file.FECHA);
          }
        case 28: break;
        case 9: 
          { string.append( yytext() );
          }
        case 29: break;
        case 22: 
          { return symbol(Sym_file.PASSWORD);
          }
        case 30: break;
        case 17: 
          { return symbol(Sym_file.EMISOR);
          }
        case 31: break;
        case 20: 
          { return symbol(Sym_file.MENSAJE);
          }
        case 32: break;
        case 21: 
          { return symbol(Sym_file.RECEPTOR);
          }
        case 33: break;
        case 11: 
          { string.append('\\');
          }
        case 34: break;
        case 8: 
          { return symbol(Sym_file.PCOMA);
          }
        case 35: break;
        case 18: 
          { return symbol(Sym_file.CUENTA);
          }
        case 36: break;
        case 3: 
          { return symbol(Sym_file.INT);
          }
        case 37: break;
        case 25: 
          { return symbol(Sym_file.FECHA_HORA);
          }
        case 38: break;
        case 10: 
          { yybegin(YYINITIAL); 
                        return symbol(Sym_file.CONTENIDO,string.toString());
          }
        case 39: break;
        case 13: 
          { string.append('\r');
          }
        case 40: break;
        case 15: 
          { string.append('\"');
          }
        case 41: break;
        case 6: 
          { return symbol(Sym_file.RP);
          }
        case 42: break;
        case 4: 
          { return symbol(Sym_file.ID);
          }
        case 43: break;
        case 19: 
          { return symbol(Sym_file.USUARIO);
          }
        case 44: break;
        case 1: 
          { error("Illegal character.");
          }
        case 45: break;
        case 5: 
          { return symbol(Sym_file.LP);
          }
        case 46: break;
        case 7: 
          { return symbol(Sym_file.EQUAL);
          }
        case 47: break;
        case 12: 
          { string.append('\t');
          }
        case 48: break;
        case 24: 
          { string.setLength(0);yybegin(YYCONTENIDO);
          }
        case 49: break;
        case 2: 
          { 
          }
        case 50: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(Sym_file.EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
