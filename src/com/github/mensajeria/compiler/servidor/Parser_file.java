
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Dec 15 11:15:11 CST 2013
//----------------------------------------------------

package com.github.mensajeria.compiler.servidor;

import com.github.mensajeria.compiler.Attr;
import com.github.mensajeria.compiler.Err;
import java.io.File;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.HashSet;
import java.lang.Thread.State;
import java.awt.Dimension;
import java.awt.Point;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Dec 15 11:15:11 CST 2013
  */
public class Parser_file extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser_file() {super();}

  /** Constructor which sets the default scanner. */
  public Parser_file(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser_file(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\047\000\002\033\003\000\002\002\004\000\002\033" +
    "\002\000\002\002\003\000\002\003\004\000\002\003\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\005\006\000\002\015\003\000\002\010\004\000\002" +
    "\010\003\000\002\011\003\000\002\011\003\000\002\021" +
    "\006\000\002\022\006\000\002\006\006\000\002\017\003" +
    "\000\002\012\004\000\002\012\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\023\006\000\002\024\006\000\002\026\007\000\002\025" +
    "\006\000\002\027\007\000\002\030\007\000\002\007\006" +
    "\000\002\016\003\000\002\014\004\000\002\014\003\000" +
    "\002\020\003\000\002\020\003\000\002\031\004\000\002" +
    "\032\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\116\000\012\002\uffff\007\013\015\010\027\015\001" +
    "\002\000\004\002\120\001\002\000\012\002\ufffc\007\ufffc" +
    "\015\ufffc\027\ufffc\001\002\000\012\002\ufffb\007\ufffb\015" +
    "\ufffb\027\ufffb\001\002\000\004\002\001\001\002\000\004" +
    "\004\053\001\002\000\012\002\ufffe\007\013\015\010\027" +
    "\015\001\002\000\012\002\ufff9\007\ufff9\015\ufff9\027\ufff9" +
    "\001\002\000\004\004\032\001\002\000\012\002\ufffa\007" +
    "\ufffa\015\ufffa\027\ufffa\001\002\000\004\004\016\001\002" +
    "\000\006\007\021\025\024\001\002\000\010\005\uffe1\007" +
    "\021\025\024\001\002\000\010\005\uffdd\007\uffdd\025\uffdd" +
    "\001\002\000\004\006\030\001\002\000\010\005\uffdf\007" +
    "\uffdf\025\uffdf\001\002\000\010\005\uffde\007\uffde\025\uffde" +
    "\001\002\000\004\006\027\001\002\000\004\005\026\001" +
    "\002\000\012\002\uffe2\007\uffe2\015\uffe2\027\uffe2\001\002" +
    "\000\010\005\uffdb\007\uffdb\025\uffdb\001\002\000\010\005" +
    "\uffdc\007\uffdc\025\uffdc\001\002\000\010\005\uffe0\007\uffe0" +
    "\025\uffe0\001\002\000\006\010\036\017\041\001\002\000" +
    "\010\005\ufff3\010\ufff3\017\ufff3\001\002\000\010\005\ufff5" +
    "\010\ufff5\017\ufff5\001\002\000\010\005\ufff7\010\036\017" +
    "\041\001\002\000\004\011\046\001\002\000\004\005\045" +
    "\001\002\000\010\005\ufff4\010\ufff4\017\ufff4\001\002\000" +
    "\004\011\042\001\002\000\004\012\043\001\002\000\004" +
    "\013\044\001\002\000\010\005\ufff1\010\ufff1\017\ufff1\001" +
    "\002\000\012\002\ufff8\007\ufff8\015\ufff8\027\ufff8\001\002" +
    "\000\004\006\047\001\002\000\004\013\050\001\002\000" +
    "\010\005\ufff2\010\ufff2\017\ufff2\001\002\000\010\005\ufff6" +
    "\010\ufff6\017\ufff6\001\002\000\012\002\ufffd\007\ufffd\015" +
    "\ufffd\027\ufffd\001\002\000\012\014\054\016\057\020\063" +
    "\021\056\001\002\000\004\011\115\001\002\000\014\005" +
    "\uffec\014\uffec\016\uffec\020\uffec\021\uffec\001\002\000\004" +
    "\004\112\001\002\000\004\011\107\001\002\000\014\005" +
    "\uffea\014\uffea\016\uffea\020\uffea\021\uffea\001\002\000\014" +
    "\005\uffed\014\uffed\016\uffed\020\uffed\021\uffed\001\002\000" +
    "\014\005\uffe9\014\uffe9\016\uffe9\020\uffe9\021\uffe9\001\002" +
    "\000\004\011\071\001\002\000\004\005\070\001\002\000" +
    "\014\005\uffef\014\054\016\057\020\063\021\056\001\002" +
    "\000\014\005\uffeb\014\uffeb\016\uffeb\020\uffeb\021\uffeb\001" +
    "\002\000\014\005\uffee\014\uffee\016\uffee\020\uffee\021\uffee" +
    "\001\002\000\012\002\ufff0\007\ufff0\015\ufff0\027\ufff0\001" +
    "\002\000\004\022\073\001\002\000\004\022\101\001\002" +
    "\000\004\023\074\001\002\000\004\022\075\001\002\000" +
    "\004\023\076\001\002\000\004\022\077\001\002\000\004" +
    "\022\uffe4\001\002\000\004\013\106\001\002\000\004\024" +
    "\102\001\002\000\004\022\103\001\002\000\004\024\104" +
    "\001\002\000\004\022\105\001\002\000\004\013\uffe3\001" +
    "\002\000\014\005\uffe6\014\uffe6\016\uffe6\020\uffe6\021\uffe6" +
    "\001\002\000\004\006\110\001\002\000\004\013\111\001" +
    "\002\000\014\005\uffe7\014\uffe7\016\uffe7\020\uffe7\021\uffe7" +
    "\001\002\000\004\012\113\001\002\000\004\005\114\001" +
    "\002\000\014\005\uffe5\014\uffe5\016\uffe5\020\uffe5\021\uffe5" +
    "\001\002\000\004\006\116\001\002\000\004\013\117\001" +
    "\002\000\014\005\uffe8\014\uffe8\016\uffe8\020\uffe8\021\uffe8" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\116\000\020\002\006\003\010\004\004\005\005\006" +
    "\013\007\011\033\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\004\051\005\005\006\013\007\011\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\014\016\016\024\020\021\031\022" +
    "\032\017\001\001\000\010\020\030\031\022\032\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\010\034\011\033\015\036\021\037\022" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\011\050\021\037\022\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\012\064\013" +
    "\060\017\063\023\054\024\065\025\061\026\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\013" +
    "\066\023\054\024\065\025\061\026\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\071\001\001\000\004\030\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser_file$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser_file$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser_file$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 
        
        
        public LinkedList<Err> errores=new LinkedList<>();
        
        
        public void report_error(String message, Object info){
                Err e=new Err(message,null,null);
                if(info instanceof java_cup.runtime.Symbol){
                        e.setSym((java_cup.runtime.Symbol)info);
                }
                errores.add(e);
        }
        public void report_fatal_error(String message,Object info){
                report_error(message,info);
                errores.getLast().println();
        }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser_file$actions {



  private final Parser_file parser;

  /** Constructor */
  CUP$Parser_file$actions(Parser_file parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser_file$do_action(
    int                        CUP$Parser_file$act_num,
    java_cup.runtime.lr_parser CUP$Parser_file$parser,
    java.util.Stack            CUP$Parser_file$stack,
    int                        CUP$Parser_file$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser_file$result;

      /* select the action based on the action number */
      switch (CUP$Parser_file$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // contacts_contact ::= CONTACTO ID 
            {
              Attr RESULT =null;

              CUP$Parser_file$result = parser.getSymbolFactory().newSymbol("contacts_contact",24, ((java_cup.runtime.Symbol)CUP$Parser_file$stack.elementAt(CUP$Parser_file$top-1)), ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), RESULT);
            }
          return CUP$Parser_file$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // contacts_account ::= CUENTA ID 
            {
              Attr RESULT =null;

              CUP$Parser_file$result = parser.getSymbolFactory().newSymbol("contacts_account",23, ((java_cup.runtime.Symbol)CUP$Parser_file$stack.elementAt(CUP$Parser_file$top-1)), ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), RESULT);
            }
          return CUP$Parser_file$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // contacts_stmt ::= contacts_contact 
            {
              Attr RESULT =null;

              CUP$Parser_file$result = parser.getSymbolFactory().newSymbol("contacts_stmt",14, ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), RESULT);
            }
          return CUP$Parser_file$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // contacts_stmt ::= contacts_account 
            {
              Attr RESULT =null;

              CUP$Parser_file$result = parser.getSymbolFactory().newSymbol("contacts_stmt",14, ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), RESULT);
            }
          return CUP$Parser_file$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // contacts_stmt_list ::= contacts_stmt 
            {
              Attr RESULT =null;

              CUP$Parser_file$result = parser.getSymbolFactory().newSymbol("contacts_stmt_list",10, ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), RESULT);
            }
          return CUP$Parser_file$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // contacts_stmt_list ::= contacts_stmt_list contacts_stmt 
            {
              Attr RESULT =null;

              CUP$Parser_file$result = parser.getSymbolFactory().newSymbol("contacts_stmt_list",10, ((java_cup.runtime.Symbol)CUP$Parser_file$stack.elementAt(CUP$Parser_file$top-1)), ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), RESULT);
            }
          return CUP$Parser_file$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // contacts_body ::= contacts_stmt_list 
            {
              Attr RESULT =null;

              CUP$Parser_file$result = parser.getSymbolFactory().newSymbol("contacts_body",12, ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), RESULT);
            }
          return CUP$Parser_file$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // contacts ::= CONTACTOS LP contacts_body RP 
            {
              Attr RESULT =null;

              CUP$Parser_file$result = parser.getSymbolFactory().newSymbol("contacts",5, ((java_cup.runtime.Symbol)CUP$Parser_file$stack.elementAt(CUP$Parser_file$top-3)), ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), RESULT);
            }
          return CUP$Parser_file$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // hora ::= INT DPUNTO INT DPUNTO INT 
            {
              Attr RESULT =null;

              CUP$Parser_file$result = parser.getSymbolFactory().newSymbol("hora",22, ((java_cup.runtime.Symbol)CUP$Parser_file$stack.elementAt(CUP$Parser_file$top-4)), ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), RESULT);
            }
          return CUP$Parser_file$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // fecha ::= INT DIAGONAL INT DIAGONAL INT 
            {
              Attr RESULT =null;

              CUP$Parser_file$result = parser.getSymbolFactory().newSymbol("fecha",21, ((java_cup.runtime.Symbol)CUP$Parser_file$stack.elementAt(CUP$Parser_file$top-4)), ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), RESULT);
            }
          return CUP$Parser_file$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // message_content ::= CONTENIDO LP ANY RP 
            {
              Attr RESULT =null;

              CUP$Parser_file$result = parser.getSymbolFactory().newSymbol("message_content",19, ((java_cup.runtime.Symbol)CUP$Parser_file$stack.elementAt(CUP$Parser_file$top-3)), ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), RESULT);
            }
          return CUP$Parser_file$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // message_date ::= FECHA EQUAL fecha hora PCOMA 
            {
              Attr RESULT =null;

              CUP$Parser_file$result = parser.getSymbolFactory().newSymbol("message_date",20, ((java_cup.runtime.Symbol)CUP$Parser_file$stack.elementAt(CUP$Parser_file$top-4)), ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), RESULT);
            }
          return CUP$Parser_file$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // message_receiver ::= RECEPTOR EQUAL ID PCOMA 
            {
              Attr RESULT =null;

              CUP$Parser_file$result = parser.getSymbolFactory().newSymbol("message_receiver",18, ((java_cup.runtime.Symbol)CUP$Parser_file$stack.elementAt(CUP$Parser_file$top-3)), ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), RESULT);
            }
          return CUP$Parser_file$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // message_sender ::= EMISOR EQUAL ID PCOMA 
            {
              Attr RESULT =null;

              CUP$Parser_file$result = parser.getSymbolFactory().newSymbol("message_sender",17, ((java_cup.runtime.Symbol)CUP$Parser_file$stack.elementAt(CUP$Parser_file$top-3)), ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), RESULT);
            }
          return CUP$Parser_file$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // message_stmt ::= message_content 
            {
              Attr RESULT =null;

              CUP$Parser_file$result = parser.getSymbolFactory().newSymbol("message_stmt",9, ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), RESULT);
            }
          return CUP$Parser_file$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // message_stmt ::= message_date 
            {
              Attr RESULT =null;

              CUP$Parser_file$result = parser.getSymbolFactory().newSymbol("message_stmt",9, ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), RESULT);
            }
          return CUP$Parser_file$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // message_stmt ::= message_receiver 
            {
              Attr RESULT =null;

              CUP$Parser_file$result = parser.getSymbolFactory().newSymbol("message_stmt",9, ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), RESULT);
            }
          return CUP$Parser_file$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // message_stmt ::= message_sender 
            {
              Attr RESULT =null;

              CUP$Parser_file$result = parser.getSymbolFactory().newSymbol("message_stmt",9, ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), RESULT);
            }
          return CUP$Parser_file$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // message_stmt_list ::= message_stmt 
            {
              Attr RESULT =null;

              CUP$Parser_file$result = parser.getSymbolFactory().newSymbol("message_stmt_list",8, ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), RESULT);
            }
          return CUP$Parser_file$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // message_stmt_list ::= message_stmt_list message_stmt 
            {
              Attr RESULT =null;

              CUP$Parser_file$result = parser.getSymbolFactory().newSymbol("message_stmt_list",8, ((java_cup.runtime.Symbol)CUP$Parser_file$stack.elementAt(CUP$Parser_file$top-1)), ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), RESULT);
            }
          return CUP$Parser_file$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // message_body ::= message_stmt_list 
            {
              Attr RESULT =null;

              CUP$Parser_file$result = parser.getSymbolFactory().newSymbol("message_body",13, ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), RESULT);
            }
          return CUP$Parser_file$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // message ::= MENSAJE LP message_body RP 
            {
              Attr RESULT =null;

              CUP$Parser_file$result = parser.getSymbolFactory().newSymbol("message",4, ((java_cup.runtime.Symbol)CUP$Parser_file$stack.elementAt(CUP$Parser_file$top-3)), ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), RESULT);
            }
          return CUP$Parser_file$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // account_pass ::= PASSWORD EQUAL ANY PCOMA 
            {
              Attr RESULT =null;

              CUP$Parser_file$result = parser.getSymbolFactory().newSymbol("account_pass",16, ((java_cup.runtime.Symbol)CUP$Parser_file$stack.elementAt(CUP$Parser_file$top-3)), ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), RESULT);
            }
          return CUP$Parser_file$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // account_name ::= USUARIO EQUAL ID PCOMA 
            {
              Attr RESULT =null;

              CUP$Parser_file$result = parser.getSymbolFactory().newSymbol("account_name",15, ((java_cup.runtime.Symbol)CUP$Parser_file$stack.elementAt(CUP$Parser_file$top-3)), ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), RESULT);
            }
          return CUP$Parser_file$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // account_stmt ::= account_pass 
            {
              Attr RESULT =null;

              CUP$Parser_file$result = parser.getSymbolFactory().newSymbol("account_stmt",7, ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), RESULT);
            }
          return CUP$Parser_file$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // account_stmt ::= account_name 
            {
              Attr RESULT =null;

              CUP$Parser_file$result = parser.getSymbolFactory().newSymbol("account_stmt",7, ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), RESULT);
            }
          return CUP$Parser_file$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // account_stmt_list ::= account_stmt 
            {
              Attr RESULT =null;

              CUP$Parser_file$result = parser.getSymbolFactory().newSymbol("account_stmt_list",6, ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), RESULT);
            }
          return CUP$Parser_file$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // account_stmt_list ::= account_stmt_list account_stmt 
            {
              Attr RESULT =null;

              CUP$Parser_file$result = parser.getSymbolFactory().newSymbol("account_stmt_list",6, ((java_cup.runtime.Symbol)CUP$Parser_file$stack.elementAt(CUP$Parser_file$top-1)), ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), RESULT);
            }
          return CUP$Parser_file$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // account_body ::= account_stmt_list 
            {
              Attr RESULT =null;

              CUP$Parser_file$result = parser.getSymbolFactory().newSymbol("account_body",11, ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), RESULT);
            }
          return CUP$Parser_file$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // account ::= CUENTA LP account_body RP 
            {
              Attr RESULT =null;

              CUP$Parser_file$result = parser.getSymbolFactory().newSymbol("account",3, ((java_cup.runtime.Symbol)CUP$Parser_file$stack.elementAt(CUP$Parser_file$top-3)), ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), RESULT);
            }
          return CUP$Parser_file$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= contacts 
            {
              Attr RESULT =null;

              CUP$Parser_file$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), RESULT);
            }
          return CUP$Parser_file$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= message 
            {
              Attr RESULT =null;

              CUP$Parser_file$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), RESULT);
            }
          return CUP$Parser_file$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= account 
            {
              Attr RESULT =null;

              CUP$Parser_file$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), RESULT);
            }
          return CUP$Parser_file$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt_list ::= stmt 
            {
              Attr RESULT =null;

              CUP$Parser_file$result = parser.getSymbolFactory().newSymbol("stmt_list",1, ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), RESULT);
            }
          return CUP$Parser_file$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt_list ::= stmt_list stmt 
            {
              Attr RESULT =null;

              CUP$Parser_file$result = parser.getSymbolFactory().newSymbol("stmt_list",1, ((java_cup.runtime.Symbol)CUP$Parser_file$stack.elementAt(CUP$Parser_file$top-1)), ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), RESULT);
            }
          return CUP$Parser_file$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // input ::= stmt_list 
            {
              Attr RESULT =null;

              CUP$Parser_file$result = parser.getSymbolFactory().newSymbol("input",0, ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), RESULT);
            }
          return CUP$Parser_file$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // begin ::= 
            {
              Attr RESULT =null;

              CUP$Parser_file$result = parser.getSymbolFactory().newSymbol("begin",25, ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), RESULT);
            }
          return CUP$Parser_file$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= begin EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser_file$stack.elementAt(CUP$Parser_file$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser_file$stack.elementAt(CUP$Parser_file$top-1)).right;
		Attr start_val = (Attr)((java_cup.runtime.Symbol) CUP$Parser_file$stack.elementAt(CUP$Parser_file$top-1)).value;
		RESULT = start_val;
              CUP$Parser_file$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser_file$stack.elementAt(CUP$Parser_file$top-1)), ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser_file$parser.done_parsing();
          return CUP$Parser_file$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // begin ::= input 
            {
              Attr RESULT =null;

              CUP$Parser_file$result = parser.getSymbolFactory().newSymbol("begin",25, ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser_file$stack.peek()), RESULT);
            }
          return CUP$Parser_file$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

