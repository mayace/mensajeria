package com.github.mensajeria.compiler.servidor;


import com.github.mensajeria.compiler.Attr;
import com.github.mensajeria.compiler.Err;

import java.nio.file.Paths;
import java.io.File;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.HashSet;
import java.lang.Thread.State;
import java.awt.Dimension;
import java.awt.Point;

//===============================================================================================//
//===============================================================================================//

parser code {: 
        
        public LinkedList<SOperacion> operaciones = new LinkedList<>();
        public LinkedList<Err> errores=new LinkedList<>();
        
        public SFile cuentas = new SFile(Paths.get("CUENTAS.ROY"),SFile.TIPO.CUENTA);
        public SFile contactos = new SFile(Paths.get("CONTACTOS.ROY"),SFile.TIPO.CONTACTOS);
        public SFile mensajes = new SFile(Paths.get("MENSAJES.ROY"),SFile.TIPO.MENSAJE);
        
        
        public void report_error(String message, Object info){
                Err e=new Err(message,null,null);
                if(info instanceof java_cup.runtime.Symbol){
                        e.setSym((java_cup.runtime.Symbol)info);
                }
                errores.add(e);
        }
        public void report_fatal_error(String message,Object info){
                report_error(message,info);
                errores.getLast().println();
        }
:};

action code{:
	void report_error(String msg,Object info){
		parser.report_error(msg,info);
	}
	void report_fatal_error(String msg,Object info){
		parser.report_fatal_error(msg,info);
	}
	void addOperacion(Object oper){
		parser.operaciones.offer(oper);
	}

:}
   
//===============================================================================================//
//===============================================================================================//
terminal        String 		LP,RP,ID,LL1,LL2,BUSCAR,PCOMA,AND,OR,EQUAL,FECHA,REMITENTE,
							RECEPTOR,MENSAJE,CONTIENE,QUOTE,NUMERAL,PERCENT,CLOSEQ,ST_CUENTA,
							ST_LOGIN,ST_MENSAJE,ST_USUARIO,ST_PASSWORD,ST_RECEPTOR,ST_EMISOR
							;
non terminal    Attr        input,stmt_list,stmt,struct,busqueda,body_struct,list_stmt_struct,
							stmt_struct,busqueda_body,busqueda_stmt_list,busqueda_stmt,begin,
							expr,expr1,expr2,val,string,body_string,list_stmt_string,stmt_string,
							cuenta,cuenta_body,cuenta_stmt_list,cuenta_stmt,login,mensaje,mensaje_body,
							mensaje_stmt_list,mensaje_stmt,usuario,password,emisor,receptor,
							st_receptor_body,st_receptor_stmt_list,st_receptor_stmt,id
							;
//===============================================================================================//
//===============================================================================================//

begin       ::= input
                |
                ;
// *********************************************************************************
// Input - Contenido de la entrada
// *********************************************************************************                
input      	::= stmt_list
                ;
stmt_list   ::= stmt_list stmt
                |stmt
                ;
stmt        ::= cuenta
				|login
				// |mensaje
				// |sol_amistad
				// |sol_respuesta
				// |lista_contactos
				// |busqueda
                ;
// *********************************************************************************
// Login - Arma la operacion de login
// *********************************************************************************

login 				::= ST_LOGIN LL1 cuenta_body:x LL2
						{:
							Attr user = x.getAttr("usuario");
							Attr pass = x.getAttr("password");


							// parsear con el parse de archivos
							// y si existe iniciar session....
							// SFile.Cuenta cuenta = (SFile.Cuenta)parser.cuentas.get(SFile.getKey(SFile.TIPO.CUENTA,user.getString("val")));
							
							// if(cuenta == null){
							// 	report_fatal_error("No existe la cuenta...",x.get("info"));
							// } else {

							// }

							// Crear y agregar la operacion
							addOperacion(new SOperacion(SOperacion.Login("","")));
						:}
						;


// *********************************************************************************
// Cuenta - Arma la operacion crear cuenta
// *********************************************************************************

cuenta 				::= ST_CUENTA LL1 cuenta_body:x LL2
						{:
							Attr user = x.getAttr("usuario");
							Attr pass = x.getAttr("password");

							// parsear con el parse de archivos
							// y if: existe error else: crear cuenta
						:}
						;
cuenta_body 		::= cuenta_stmt_list:x {:RESULT = x;:}
						;

cuenta_stmt_list	::=	cuenta_stmt_list:l cuenta_stmt:x
						{:
							Boolean usuario = x.getBoolean("usuario");
							Boolean password = x.getBoolean("password");

							if(usuario != null && usuario){
								l.set("usuario",x);
							}
							if(password != null && password){
								l.set("password",x);
							}
							
							RESULT = l;
						:}
						|cuenta_stmt:x
						{:
							RESULT = x;
						:}
						;

cuenta_stmt 		::=	usuario:x 	{:RESULT = x;:}
						|password:x	{:RESULT = x;:}
						;
usuario 			::= ST_USUARIO LL1 id:x LL2
						{:
							x.set("usuario",true);
							RESULT = x;
						:}
						;
password 			::= ST_PASSWORD LL1 id:x LL2
						{:
							x.set("password",true);
							RESULT = x;
						:}
						;
// *********************************************************************************
// Mensaje - Arma la operacion de un mensaje
// *********************************************************************************

mensaje 			::= ST_MENSAJE LL1 mensaje_body:x LL2
						;
mensaje_body 		::= mensaje_stmt_list
						;
mensaje_stmt_list 	::= mensaje_stmt_list mensaje_stmt
						|mensaje_stmt
						;
mensaje_stmt 		::= emisor
						|receptor
						|ST_MENSAJE LL1 LL2
						;
emisor 				::= ST_EMISOR LL1 ID LL2
						;
receptor 			::= ST_RECEPTOR LL1 st_receptor_body LL2
						;
st_receptor_body 		::= st_receptor_stmt_list
						;
st_receptor_stmt_list 	::= st_receptor_stmt_list st_receptor_stmt
							|st_receptor_stmt
							;
st_receptor_stmt 		::= ST_CUENTA ID
							;
// *********************************************************************************
// Búsqueda - Arma la operacion de  una búsqueda unicamente.
// *********************************************************************************
busqueda 			::=	busqueda_body
						;
busqueda_body 		::= busqueda_stmt_list
						;
busqueda_stmt_list 	::= busqueda_stmt_list busqueda_stmt
						|busqueda_stmt
						;
busqueda_stmt 		::= BUSCAR expr PCOMA
						;
expr 				::= expr OR expr1
						|expr1
						;
expr1 				::= expr1 AND expr2
						|expr2
						;
expr2 				::=	FECHA EQUAL val
						|REMITENTE EQUAL val
						|RECEPTOR EQUAL val
						|MENSAJE EQUAL val
						;

val 				::= string
						|CONTIENE LP string RP
						;
string 				::= QUOTE body_string QUOTE
						;
body_string 		::= list_stmt_string
						|
						;
list_stmt_string 	::= list_stmt_string stmt_string
						|stmt_string
						;
stmt_string 		::= NUMERAL
						|PERCENT
						|CLOSEQ
						;


id 					::=	ID:x
						{:
                            Attr a = new Attr();
                            a.set("val",x);
                            a.set("id",true);
                            a.set("info",CUP$Parser$stack.peek());
                            RESULT = a;
						:}
						;
