 package com.github.mensajeria.compiler.proem;


import com.github.mensajeria.compiler.Sim;
import com.github.mensajeria.compiler.Attr;
import com.github.mensajeria.compiler.Err;
import com.github.mensajeria.compiler.Nodo;

import java.io.File;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.HashSet;
import java.lang.Thread.State;
import java.awt.Dimension;
import java.awt.Point;



parser code {: 
    
    public HashMap<String,Sim> symtable = new HashMap<>();
    public LinkedList<Err> errors = new LinkedList<>();

    public Object[] pila = new Object[100];
    public int p = 0;
    


    public void report_error(String message, Object info){
        Err e = new Err(message,null,null);
        if(info instanceof java_cup.runtime.Symbol){
            e.setSym((java_cup.runtime.Symbol)info);
        }
        errors.add(e);
        e.println();
    }
    public void report_fatal_error(String message,Object info){
        report_error(message,info);
        errors.getLast().println();
    }
:};

action code{:
    Sim getSim(String key){
        return parser.symtable.get(key);
    }
    Sim addSim(String name,String type,Object data){
        //pre
        System.out.println("Added Sim: " + name);
        //mid
        int pos = parser.p;
        String key = name;
        Sim val = new Sim(name,type,pos);
        parser.symtable.put(key,val);
        parser.pila[pos] = data;
        //post
        parser.p++;
        System.out.println("SimTable Size: " + parser.symtable.size());
        return val;
    }

    void report_error(String msg,Object info){
        parser.report_error(msg,info);
    }

    Object[] getPila(){
        return parser.pila;
    }
    HashMap<String,Sim> getTabla(){
        return parser.symtable;
    }
    LinkedList<Err> getErrs(){
        return parser.errors;
    }
:}

/****************************************************************************************/
terminal        String 		KW_INT,KW_STRING,KW_BOOLEAN,KW_QUEUE,KW_LIST,INT,STRING,BOOLEAN,ID,
							EQUAL,COMA,PCOMA,OR,AND,NOT,DEQUAL,NEQUAL,BTHAN,LTHAN,BETHAN,LETHAN,
							LP,RP,MINUS,PLUS,MULTI,DIV,NERROR,WHILE,WAIT,FOR,TO,IF,ELSE,SEND,IS,
                            PUNTO,LL1,LL2,PRINTLN
							;
non terminal    Attr        begin,input,stmt_list,stmt,declaracion,asignacion,control,id_list,
                            esperar,enviar,tipo,expr,expr1,expr2,expr3,expr4,expr5,
                            id,string,int,boolean,params,expr_list,while,for,if,elseif,
                            expr_list_p,control_body
							;
/****************************************************************************************/
begin       ::= input   {:System.out.println("Compiled...");:}
                |
                ;
// *********************************************************************************
// Input - Contenido de la entrada
// *********************************************************************************
input       ::=	stmt_list:x 
                {:
                    x.getNodo("nodo").exec(getPila(),getTabla(),getErrs());
                    RESULT = x;
                :}
                ;

stmt_list   ::= stmt_list:l stmt:x
                {:
                    l.set("nodo",new Nodo(Nodo.OPERACION.STMT,l.getNodo("nodo"),x.getNodo("nodo")));
                    RESULT = l;
                :}
                |stmt:x
                {:
                    Attr a = new Attr();
                    a.set("nodo",new Nodo(Nodo.OPERACION.STMT,x.getNodo("nodo"),null));
                    RESULT = a;
                :}
                ;
stmt        ::= declaracion:x   {:RESULT = x;:}
                |asignacion:x   {:RESULT = x;:}
                |esperar:x      {:RESULT = x;:}
                |enviar:x       {:RESULT = x;:}
                |control:x      {:RESULT = x;:}
                |PRINTLN expr:e       
                {:
                    Attr a = new Attr();
                    a.set("nodo",new Nodo(Nodo.OPERACION.PRINTLN,e.getNodo("nodo"),null));

                    RESULT = a;
                :}
                ;
declaracion ::= id_list:l IS tipo:t PCOMA
                {:
                    for(Attr a : l.getList("list")){

                        String name = a.getString("val");
                        String type = t.getString("type");


                        if(getSim(name) == null){
                            if(type == null){
                                addSim(name,type,null);
                            }
                        } else{
                            report_error("Ya existe la variable '" + name + "'", a.getSymbol("info"));
                        }
                    } 
                    RESULT = new Attr();              

                :}
                ;
asignacion  ::= expr:e EQUAL id_list:l PCOMA
                {:
                    
                    
                    Nodo nodo = new Nodo(Nodo.OPERACION.ASIGNACION,e.getNodo("nodo"),new Nodo(new Attr("val",l.getList("list")),false));

                    e.set("list",l.getList("list"));
                    e.set("nodo",nodo);
                    RESULT = e;
                :}
                |expr_list:e LP params:p RP EQUAL id_list:l PCOMA
                {:
                    Integer count = e.getInteger("count");
                    if(count == 1){
                        
                        e.set("params",p.getList("list"));
                        e.set("list",l.get("list"));

                        Nodo left = new Nodo(e,false);
                        Nodo nodo = new Nodo(Nodo.OPERACION.ASIGNACION,left,null);

                        e.set("nodo",nodo);
                    }   
                :}
                ;
esperar     ::= WAIT LP expr:e RP PCOMA
                {:
                    Attr a = new Attr();
                    Nodo nodo = new Nodo(Nodo.OPERACION.ESPERAR,e.getNodo("nodo"),null);

                    a.set("nodo",nodo);
                    RESULT = a;
                :}
                ;
enviar      ::= SEND LP expr:e RP PCOMA
                {:
                    Attr a = new Attr();
                    Nodo nodo = new Nodo(Nodo.OPERACION.ENVIAR,e.getNodo("nodo"),null);

                    a.set("nodo",nodo);
                    RESULT = a;
                :}
                ;

id_list         ::= id_list:x COMA id:x1    
                    {:
                        x.getList("list").add(x1);
                        RESULT = x;
                    :}
                    |id:x                   
                    {:
                        Attr a = new Attr("list",new ArrayList<Attr>());
                        a.getList("list").add(x);
                        RESULT = a;
                    :}
                    ;

tipo            ::= KW_LIST         {:RESULT = new Attr("tipo","list");:}
                    |KW_QUEUE       {:RESULT = new Attr("tipo","queue");:}
                    |KW_BOOLEAN     {:RESULT = new Attr("tipo","boolean");:}
                    |KW_STRING      {:RESULT = new Attr("tipo","string");:}
                    |KW_INT         {:RESULT = new Attr("tipo","int");:}
                    |error          {:RESULT = new Attr();:}
                    ;


expr            ::= expr:l OR expr1:x
                    {:
                        Nodo nodo = new Nodo(Nodo.OPERACION.OR,l.getNodo("nodo"),x.getNodo("nodo"));
                        l.set("nodo",nodo);
                        RESULT = l;
                    :}
                    |expr1:x                   
                    {:RESULT = x;:}
                    ;
expr1           ::= expr1:l AND expr2:x
                    {:
                        Nodo nodo = new Nodo(Nodo.OPERACION.AND,l.getNodo("nodo"),x.getNodo("nodo"));
                        l.set("nodo",nodo);
                        RESULT = l;
                    :}
                    |expr2:x                   
                    {:RESULT = x;:}
                    ;
expr2           ::= expr2:l LETHAN expr3:x
                    {:
                        Nodo nodo = new Nodo(Nodo.OPERACION.LETHAN,l.getNodo("nodo"),x.getNodo("nodo"));
                        l.set("nodo",nodo);
                        RESULT = l;
                    :}
                    |expr2:l BETHAN expr3:x
                    {:
                        Nodo nodo = new Nodo(Nodo.OPERACION.BETHAN,l.getNodo("nodo"),x.getNodo("nodo"));
                        l.set("nodo",nodo);
                        RESULT = l;
                    :}
                    |expr2:l LTHAN expr3:x
                    {:
                        Nodo nodo = new Nodo(Nodo.OPERACION.LTHAN,l.getNodo("nodo"),x.getNodo("nodo"));
                        l.set("nodo",nodo);
                        RESULT = l;
                    :}
                    |expr2:l BTHAN expr3:x
                    {:
                        Nodo nodo = new Nodo(Nodo.OPERACION.BTHAN,l.getNodo("nodo"),x.getNodo("nodo"));
                        l.set("nodo",nodo);
                        RESULT = l;
                    :}
                    |expr2:l DEQUAL expr3:x
                    {:
                        Nodo nodo = new Nodo(Nodo.OPERACION.DEQUAL,l.getNodo("nodo"),x.getNodo("nodo"));
                        l.set("nodo",nodo);
                        RESULT = l;
                    :}
                    |expr2:l NEQUAL expr3:x
                    {:
                        Nodo nodo = new Nodo(Nodo.OPERACION.NEQUAL,l.getNodo("nodo"),x.getNodo("nodo"));
                        l.set("nodo",nodo);
                        RESULT = l;
                    :}
                    |expr3:x
                    {:RESULT = x;:}
                    ;
expr3           ::= expr3:l PLUS expr4:x
                    {:
                        Nodo nodo = new Nodo(Nodo.OPERACION.SUMA,l.getNodo("nodo"),x.getNodo("nodo"));
                        l.set("nodo",nodo);
                        RESULT = l;
                    :}
                    |expr3:l MINUS expr4:x
                    {:
                        Nodo nodo = new Nodo(Nodo.OPERACION.RESTA,l.getNodo("nodo"),x.getNodo("nodo"));
                        l.set("nodo",nodo);
                        RESULT = l;
                    :}
                    |expr4:x                    {:RESULT = x;:}
                    ;
expr4           ::= expr4:l MULTI expr5:x
                    {:
                        Nodo nodo = new Nodo(Nodo.OPERACION.MULTIPLICACION,l.getNodo("nodo"),x.getNodo("nodo"));
                        l.set("nodo",nodo);
                        RESULT = l;
                    :}
                    |expr4:l DIV expr5:x 
                    {:
                        Nodo nodo = new Nodo(Nodo.OPERACION.DIVISION,l.getNodo("nodo"),x.getNodo("nodo"));
                        l.set("nodo",nodo);
                        RESULT = l;
                    :}
                    |expr5:x                    {:RESULT = x;:}
                    ;
expr5           ::= id:x            {:RESULT = x;:}
                    |boolean:x      {:RESULT = x;:}
                    |string:x       {:RESULT = x;:}
                    |int:x          {:RESULT = x;:}
                    |LP expr:x RP   {:RESULT = x;:}
                    ;


boolean         ::= BOOLEAN:x   {:
                                    Attr a = new Attr();

                                    a.set("val",x);
                                    a.set("type","boolean");
                                    a.set("info",CUP$Parser$stack.peek());
                                    a.set("nodo",new Nodo(a,false));
                                    RESULT = a;
                                :}
                    ;
string          ::= STRING:x     {:
                                    Attr a = new Attr();
                                    a.set("val",x);
                                    a.set("type","string");
                                    a.set("info",CUP$Parser$stack.peek());
                                    a.set("nodo",new Nodo(a,false));
                                    RESULT = a;
                                :}
                    ;
int             ::= INT:x       {:
                                    Attr a = new Attr();
                                    a.set("val",x);
                                    a.set("type","int");
                                    a.set("info",CUP$Parser$stack.peek());
                                    a.set("nodo",new Nodo(a,false));
                                    RESULT = a;
                                :}
                    ;
id              ::= ID:x        {:
                                    String key = x;
                                    String type = null;
                                    boolean exists = false;

                                    Sim sim = getSim(key);

                                    if(sim != null){
                                        type = sim.getType();
                                        exists = true;
                                    }


                                    Attr a = new Attr();
                                    a.set("val",key);
                                    a.set("type",type);
                                    a.set("id",true);
                                    a.set("exists",exists);
                                    a.set("info",CUP$Parser$stack.peek());
                                    a.set("nodo",new Nodo(a,true));
                                    RESULT = a;
                                :}
                    ;

params          ::= expr_list_p:x     {:RESULT = x;:}
                    |               {:RESULT = new Attr();:}
                    ;
                // solo puede ser (cola | lista).funcion
expr_list       ::= //expr_list COMA expr
                    expr_list:l PUNTO expr:x
                    {:
                        Boolean isId = x.getBoolean("id");
                        Integer count = l.getInteger("count")+1;
                        l.set("count",count);
                        if(x != null && isId ){

                            switch(count){
                                case 1:
                                    l.set("funcion",x);
                                break;
                                default:
                                    report_error("No existe funcion asociada.",x.get("info"));
                            }


                        } else {
                            report_error("Se esperaba un identificador",x.get("info"));
                        }
    
                        RESULT = l;
                    :}
                    |expr:x
                    {:
                        Boolean isId = x.getBoolean("id");
                        Attr a = new Attr();
                        if(x != null && isId ){
                            a.set("id",x);
                        } else {
                            report_error("Se esperaba un identificador",a.get("info"));
                        }
                        a.set("count",0);
                        RESULT = a;
                    :}
                    ;
expr_list_p     ::= expr_list_p:l COMA expr:x
                    {:
                        l.getList("list").add(x);
                        RESULT = l;
                    :}
                    |expr:x
                    {:
                        Attr a = new Attr();
                        ArrayList<Attr> l = new ArrayList<>();
                        a.set("list",x);
                        RESULT = a;
                    :}
                    ;
control         ::= while:x   {:RESULT = x;:}
                    |for:x    {:RESULT = x;:}
                    |if:x     {:RESULT = x;:}
                    ;
while           ::= WHILE LP expr:e RP LL1 control_body:x LL2
                    {:
                        Attr a = new Attr();
                        Nodo nodo = new Nodo(Nodo.OPERACION.WHILE,e.getNodo("nodo"),x.getNodo("nodo"));

                        a.set("nodo",nodo);
                        RESULT = a;
                    :}
                    ;
for             ::= FOR LP id:id TO expr:e RP LL1 control_body:x LL2
                    {:
                        Attr a = new Attr();
                        Nodo nodo = new Nodo(Nodo.OPERACION.FOR,e.getNodo("nodo"),x.getNodo("nodo"));

                        e.set("id",id);
                        a.set("nodo",nodo);
                        RESULT = a;
                    :}
                    ;
if              ::= IF LP expr:e RP LL1 control_body:x LL2 elseif:x1
                    {:
                        Attr a = new Attr();
                        Nodo nodo = new Nodo(Nodo.OPERACION.IF,e.getNodo("nodo"),x.getNodo("nodo"));

                        a.set("nodo",nodo);
                        a.set("else",e.getNodo("nodo"));
                        RESULT = a;
                    :}
                    ;
elseif          ::= ELSE LL1 control_body:x LL2 {:RESULT = new Attr();:}
                    |{:RESULT = new Attr();:}
                    ;

control_body    ::= input:x {:RESULT = x;:}
                    |       {:RESULT = new Attr();:}
                    ;